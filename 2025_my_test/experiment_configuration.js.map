{"version":3,"file":"./experiment_configuration.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA,kBAAkB;AAClB;AACA;AACA,uBAAuB;AACvB,eAAe;AACf,iBAAiB;AACjB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,qBAAqB,wBAAwB;AACvF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,qCAAqC,OAAO;AAC5C;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,kBAAkB;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,kBAAkB;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,kBAAkB;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,kBAAkB;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,kBAAkB;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,wDAAwD;AACxD,yDAAyD;AACzD;AACA;AACA;AACA;AACA,SAAS;AACT,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B,qCAAqC;AAClF;AACA;AACA;AACA;AACA,2JAA2J;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,MAAM,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sBAAsB,wBAAwB;AACzF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,kEAAkE;AAClE,qBAAqB;AACrB;AACA;AACA,yCAAyC;AACzC,kEAAkE;AAClE,qBAAqB;AACrB;AACA;AACA,yCAAyC;AACzC,qEAAqE;AACrE,qBAAqB;AACrB;AACA;AACA,yCAAyC;AACzC,oDAAoD;AACpD,qBAAqB;AACrB;AACA;AACA,yCAAyC;AACzC,iDAAiD;AACjD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC,wBAAwB,2BAA2B;AACnD;AACA,kCAAkC;AAClC,qDAAqD,UAAU;AAC/D,cAAc;AACd;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,6BAA6B,UAAU,IAAI,MAAM;AACjD,aAAa;AACb,cAAc;AACd;AACA,mDAAmD;AACnD;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,aAAa;AACb,iBAAiB;AACjB,cAAc,EAAE;AAChB;AACA,4BAA4B,EAAE,0BAA0B,oBAAoB;AAC5E;AACA;AACA,kDAAkD;AAClD,0BAA0B;AAC1B;AACA,iBAAiB;AACjB,cAAc;AACd;AACA,mDAAmD,yBAAyB;AAC5E,6DAA6D;AAC7D;AACA,oEAAoE,iBAAiB;AACrF,oEAAoE,eAAe;AACnF;AACA;AACA;AACA,2CAA2C,sBAAsB,wBAAwB;AACzF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2JAA2J;AAC3J,4CAA4C;AAC5C;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC,wBAAwB,2BAA2B;AACnD;AACA,kCAAkC;AAClC,0DAA0D,UAAU;AACpE,cAAc;AACd;AACA,8CAA8C;AAC9C,yDAAyD,UAAU,IAAI,0BAA0B;AACjG,cAAc;AACd;AACA,mDAAmD;AACnD;AACA;AACA,2BAA2B;AAC3B;AACA,8BAA8B;AAC9B;AACA,aAAa;AACb,iBAAiB;AACjB,cAAc,EAAE;AAChB;AACA,4BAA4B,EAAE,0BAA0B,oBAAoB;AAC5E;AACA;AACA,kDAAkD;AAClD,0BAA0B;AAC1B;AACA,iBAAiB;AACjB,cAAc;AACd;AACA,mDAAmD,yBAAyB;AAC5E,6DAA6D;AAC7D;AACA,oEAAoE,iBAAiB;AACrF,oEAAoE,eAAe;AACnF;AACA;AACA;AACA;AACA,2CAA2C,sBAAsB,wBAAwB;AACzF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,oCAAoC,mCAAmC;AACvE,iBAAiB;AACjB;AACA;AACA,gCAAgC;AAChC,oCAAoC,mCAAmC;AACvE,iBAAiB;AACjB;AACA;AACA,gCAAgC;AAChC,oCAAoC,sCAAsC;AAC1E,iBAAiB;AACjB;AACA;AACA,gCAAgC;AAChC,oCAAoC,qBAAqB;AACzD,iBAAiB;AACjB;AACA;AACA,gCAAgC;AAChC,oCAAoC,kBAAkB;AACtD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE,mDAAmD,WAAW;AAC9D;AACA,mFAAmF;AACnF;AACA;AACA;AACA,+BAA+B,KAAK,IAAI,oFAAoF;AAC5H;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA,+BAA+B;AAC/B;AACA,cAAc;AACd;AACA,mDAAmD,aAAa,cAAc;AAC9E;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,2CAA2C,sBAAsB,wBAAwB;AACzF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6JAA6J;AAC7J;AACA;AACA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE,mDAAmD,WAAW;AAC9D;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gCAAgC;AACxD,+BAA+B,uBAAuB,IAAI,sBAAsB;AAChF;AACA,wBAAwB,oBAAoB;AAC5C,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA,+BAA+B;AAC/B;AACA,cAAc;AACd;AACA,mDAAmD,aAAa,cAAc;AAC9E;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,2CAA2C,sBAAsB,wBAAwB;AACzF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,oDAAoD;AACpD,kBAAkB;AAClB;AACA;AACA,uCAAuC;AACvC,oDAAoD;AACpD,kBAAkB;AAClB;AACA;AACA,uCAAuC;AACvC,iDAAiD;AACjD,kBAAkB;AAClB;AACA;AACA,uCAAuC;AACvC,sCAAsC;AACtC,kBAAkB;AAClB;AACA;AACA,uCAAuC;AACvC,yCAAyC;AACzC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE,mDAAmD,WAAW;AAC9D;AACA,mFAAmF;AACnF;AACA;AACA;AACA,sCAAsC,KAAK,OAAO,mBAAmB,uBAAuB,oFAAoF,EAAE;AAClL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B,aAAa;AAC/D;AACA,iCAAiC;AACjC;AACA,cAAc;AACd;AACA,yDAAyD;AACzD;AACA,2CAA2C,SAAS,MAAM;AAC1D;AACA;AACA;AACA,0BAA0B,8BAA8B,EAAE,sBAAsB,IAAI,0BAA0B,IAAI;AAClH,wBAAwB,8BAA8B,EAAE,mCAAmC,IAAI;AAC/F,yBAAyB,SAAS;AAClC,wBAAwB,yBAAyB;AACjD;AACA,cAAc;AACd;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,2CAA2C,sBAAsB,wBAAwB;AACzF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6JAA6J;AAC7J;AACA;AACA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE,mDAAmD,WAAW;AAC9D;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gCAAgC;AACxD,sCAAsC,uBAAuB,OAAO,qCAAqC,uBAAuB,sBAAsB,EAAE;AACxJ;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B,aAAa;AAC/D;AACA,iCAAiC;AACjC;AACA,cAAc;AACd;AACA,yDAAyD;AACzD;AACA,2CAA2C,SAAS,MAAM;AAC1D;AACA;AACA;AACA,0BAA0B,8BAA8B,EAAE,sBAAsB,IAAI,0BAA0B,IAAI;AAClH,wBAAwB,8BAA8B,EAAE,mCAAmC,IAAI;AAC/F,yBAAyB,SAAS;AAClC,wBAAwB,yBAAyB;AACjD;AACA,cAAc;AACd;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,2CAA2C,sBAAsB,wBAAwB;AACzF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,kFAAkF,YAAY,aAAa,qBAAqB,gBAAgB;AAChJ,iGAAiG,YAAY,aAAa,sBAAsB,gBAAgB;AAChK,mHAAmH,YAAY,aAAa,iBAAiB,gBAAgB;AAC7K;AACA,uDAAuD;AACvD,4DAA4D,aAAa;AACzE,qCAAqC,UAAU,MAAM,oBAAoB,MAAM,wBAAwB,MAAM,eAAe;AAC5H,6DAA6D,aAAa;AAC1E,+CAA+C,SAAS,MAAM,UAAU,MAAM,sCAAsC,UAAU,MAAM,iBAAiB,UAAU,MAAM,MAAM,MAAM,SAAS,UAAU,QAAQ,KAAK;AACjN,wDAAwD,aAAa;AACrE,uBAAuB,MAAM,kBAAkB,MAAM,MAAM,MAAM,IAAI,8BAA8B,aAAa,IAAI,UAAU,MAAM,MAAM,MAAM,MAAM,OAAO,SAAS;AACtK,uBAAuB,MAAM,MAAM,MAAM,IAAI,yBAAyB,UAAU,MAAM;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,YAAY,aAAa,qBAAqB,gBAAgB;AAC5J,wGAAwG,YAAY,aAAa,sBAAsB,gBAAgB;AACvK;AACA;AACA,uDAAuD;AACvD,4DAA4D,aAAa;AACzE,mCAAmC,UAAU,MAAM,oBAAoB,MAAM,wBAAwB,MAAM,eAAe;AAC1H,6DAA6D,aAAa;AAC1E,4EAA4E;AAC5E,uBAAuB,MAAM,eAAe,MAAM,UAAU,UAAU,MAAM,MAAM,MAAM,kBAAkB,OAAO,YAAY,OAAO,KAAK;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2HAA2H,YAAY,aAAa,qBAAqB,gBAAgB;AACzL,+GAA+G,YAAY,aAAa,sBAAsB,gBAAgB;AAC9K;AACA,mEAAmE;AACnE,wEAAwE,aAAa;AACrF,kDAAkD,UAAU,MAAM,oBAAoB,MAAM,eAAe;AAC3G,yEAAyE,aAAa;AACtF,8DAA8D,UAAU,MAAM,SAAS;AACvF,uEAAuE,aAAa;AACpF,mEAAmE,UAAU,MAAM,4BAA4B,MAAM,uBAAuB,MAAM,YAAY,KAAK,KAAK,EAAE;AAC1K;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,YAAY,aAAa,qBAAqB,gBAAgB;AAC7K,mGAAmG,YAAY,aAAa,sBAAsB,gBAAgB;AAClK;AACA,qFAAqF,YAAY,aAAa,oBAAoB,gBAAgB;AAClJ,uDAAuD;AACvD,4DAA4D,aAAa;AACzE,sCAAsC;AACtC,uBAAuB,MAAM;AAC7B,uBAAuB,MAAM;AAC7B,kBAAkB;AAClB,6DAA6D,aAAa;AAC1E,kDAAkD;AAClD,uBAAuB,MAAM;AAC7B,kBAAkB;AAClB,2DAA2D,aAAa;AACxE,uDAAuD;AACvD,uBAAuB,MAAM;AAC7B,uBAAuB,MAAM;AAC7B,uBAAuB,MAAM,WAAW;AACxC,yBAAyB,MAAM,MAAM,MAAM;AAC3C,uBAAuB,MAAM,MAAM,MAAM,eAAe;AACxD,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,YAAY;AACjE,uBAAuB,MAAM,MAAM,OAAO;AAC1C,uBAAuB,MAAM,MAAM,MAAM;AACzC,uBAAuB,OAAO;AAC9B,kBAAkB,EAAE;AACpB,gCAAgC,UAAU,oBAAoB;AAC9D;AACA;AACA,sDAAsD;AACtD,uBAAuB,MAAM,UAAU;AACvC,uBAAuB,MAAM,MAAM,MAAM;AACzC,uBAAuB,OAAO;AAC9B,kBAAkB;AAClB;AACA,uDAAuD,yBAAyB;AAChF,iEAAiE;AACjE;AACA,wEAAwE,eAAe,GAAG;AAC1F,wEAAwE,aAAa,GAAG;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0JAA0J,YAAY,aAAa,kBAAkB,gBAAgB;AACrN,oFAAoF,YAAY,aAAa,oBAAoB,gBAAgB;AACjJ,uDAAuD;AACvD,yDAAyD,aAAa,0BAA0B;AAChG,2DAA2D,aAAa,iCAAiC,MAAM,eAAe,MAAM,eAAe,UAAU,MAAM,MAAM,MAAM,oBAAoB,OAAO,MAAM;AAChN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qEAAqE;AACrE;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA,kD;;;;;;;;;;;;;;;;ACxxC6C;AACtC;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iDAAiD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;;;;;;ACrFyC;AAClC;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,eAAe,kDAAQ;AACvB;AACA,iD;;;;;;;;;;;;;;ACdO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;;;;;;;;;;;;;;;;;;;;;;;;;ACjB6C;AACtC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAQ;AACvB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACA;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,sCAAsC;AACtH;AACA;AACA,yBAAyB;AACzB;AACA,wEAAwE,sBAAsB;AAC9F;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,yDAAQ;AACvD,qCAAqC;AACrC;AACA;AACA,yBAAyB;AACzB;AACA,wEAAwE,OAAO,yDAAQ,gBAAgB;AACvG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uC;;;;;;;;;;;;;;;;;ACvGuE;AACpB;AAC5C;AACP;AACA;AACA;AACO,6CAA6C,+EAAkB;AACtE;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0D;;;;;;;;;;;;;;;;;;ACtCkD;AAC2B;AACQ;AAC9E;AACP;AACA;AACA;AACO,6BAA6B,8FAA8B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAqB,mDAAmD;AAC3F;AACA;AACA;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,0C;;;;;;;;;;;;;;;AC3D2E;AACpE,mCAAmC,oFAAyB;AACnE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,gD;;;;;;;;;;;;;;;;;ACb6E;AAC3B;AACmC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wCAAwC,8FAA8B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAqB,+GAA+G;AACvJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAqB,+GAA+G;AACvJ;AACA;AACA;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qD;;;;;;;;;;;;;;;;;;;;;ACjJqF;AACR;AAC3B;AAClD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO,sCAAsC,8FAA8B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAqB,4GAA4G;AACpJ;AACA;AACA;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mD;;;;;;;;;;;;;;;;;ACtG6E;AAC3B;AACyB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2CAA2C,oFAAyB;AAC3E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAqB,sIAAsI;AAC9K;AACA;AACA;AACA;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wD;;;;;;;;;;;;;;;;;AC3FuE;AACA;AACrB;AAC3C,6CAA6C,+EAAkB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mFAAe,qBAAqB;AAC5D,YAAY,8DAAI;AAChB;AACA;AACA,4BAA4B,gCAAgC,wCAAwC;AACpG,YAAY,8DAAI;AAChB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0D;;;;;;;;;;;;;;;;;;ACxC0E;AACF;AAC2B;AAC5F,oCAAoC,yEAAwB;AACngHAAgC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kEAAiB;AAC7B;AACA,KAAK;AACL;AACA,yBAAyB,iEAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,iD;;;;;;;;;;;;;;;;;;;;;AC1ImE;AACO;AACkB;AACU;AAChB;AACM;AACrF;AACP;AACA;AACO,yCAAyC,4EAAqB;AACrE;AACA;AACA,oCAAoC,kFAAc;AAClD,8BAA8B,kFAAc;AAC5C;AACA,iDAAiD,8FAAoB;AACrE;AACA;AACA,qCAAqC,8GAA4B;AACjE;AACA;AACA;AACA,qCAAqC,oGAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oGAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sD;;;;;;;;;;;;;;;AC7CO;AACA;AACP;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA,6CAA6C,gBAAgB,aAAa,WAAW,qBAAqB;AAC1G;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,8DAA8D;AAC9D,iDAAiD;AACjD,8CAA8C;AAC9C,6EAA6E;AAC7E,uDAAuD;AACvD,qEAAqE,aAAa;AAClF;AACA;AACA;AACA;AACA;AACA,iD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDuE;AACL;AACsC;AACjG;AACA;AACP;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP,eAAe,wFAAW;AAC1B;AACO;AACP,eAAe,qFAAQ;AACvB;AACO;AACP,eAAe,yFAAY;AAC3B;AACO;AACP;AACA,eAAe,8EAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAK;AACL,2C;;;;;;;;;;;;;;ACtSO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;;;;;;;AC5EsD;AACA;AACrB;AAC6C;AACvE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,uFAAqB;AACrE,gBAAgB,kEAAY;AAC5B,yEAAyE,+DAAS;AAClF,iBAAiB;AACjB,+BAA+B,0CAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kD;;;;;;;;;;;;;;;;;;AClC+E;AACD;AACR;AACS;AACxE;AACP,oBAAoB,uFAAqB;AACzC,yCAAyC,uFAAqB;AAC9D,oCAAoC,sFAA0B;AAC9D,qCAAqC,8EAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,4D;;;;;;;;;;;;;;;ACxB2C;AACpC;AACP;AACA;AACA;AACA;AACA,qCAAqC,oDAAS;AAC9C;AACA;AACA;AACA,gD;;;;;;;;;;;;;;;;;ACViE;AACqB;AACnB;AAC5D;AACP;AACA;AACA;AACA;AACA,4CAA4C,0EAAoB;AAChE;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,QAAQ,+FAAsB;AAC9B,4CAA4C,4EAAqB;AACjE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iD;;;;;;;;;;;;;;ACrCO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;ACVO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iD;;;;;;;;;;;;;;;;ACbkC;AAC2B;AAC7D;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAoB;AACnC;AACA;AACA;AACA;AACA;AACA,iD;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxC2C;AACpC;AACA;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP,oBAAoB,iBAAiB;AACrC,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,6BAA6B;AAC7B,4BAA4B;AAC5B,4BAA4B;AAC5B,8BAA8B;AAC9B,6BAA6B;AAC7B;AACA,8BAA8B;AAC9B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,kCAAkC,yBAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iCAAiC,kDAAkD;AACnF,qBAAqB,mCAAmC,iBAAiB;AACzE;AACA;AACA,wDAAQ;AACR,iC;;;;;;;;;;;;;;AClGA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,sC;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kD;;;;;;;;;;;;;;;;;;;;;AClEO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACO;AACP,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC;AACA,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC;AACA,wCAAwC;AACxC;AACA;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,EAAE;AACF,sBAAsB,oBAAoB;AAC1C,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,yCAAyC,SAAI;AAC7C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACe;AACf;AACA;AACA;AACA,2B;;;;;;UCvRA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;;;;;;;ACNmH;AAKlC;AAEc;AAE/F,IAAI,IAAI,GAAG,IAAI,CAAC;AAEhB,4GAAQ,CAAC,IAAI,CAAC,CAAC;AAEf,6CAA6C;AAC7C,uDAAuD;AAEvD,IAAI,iCAAiC,GAAG,CAAC,MAAgC,EAAE,EAAE;IACzE,OAAO;QACH,eAAe,EAAE,yBAAyB;QAC1C,IAAI,EAAE,IAAI;QAEV,kBAAkB,EAAE;YAChB,qCAAqC;YACrC,+JAA+J;YAC/J,4GAA4G;YAC5G,8DAA8D;YAE9D,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAC9B,yDAAyD;gBACzD,uIAAuI;gBACvI,sIAAsI;gBACtI,yHAAyH;YACzH,mGAAmG;aACtG;YAED,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAC9B,uLAAuL;gBACvL,mJAAmJ;gBACnJ,mJAAmJ,CACtJ;YAED,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAC9B,0MAA0M;gBAC1M,iJAAiJ;gBACjJ,mGAAmG;gBACnG,MAAM;gBACN,2BAA2B;gBAC3B,yBAAyB;gBACzB,2DAA2D;gBAC3D,OAAO;gBACP,iEAAiE,CACpE;YAED,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAC9B,mIAAmI;gBACnI,iGAAiG;gBACjG,6DAA6D;gBAC7D,iJAAiJ;gBACjJ,wIAAwI,CAC3I;YAED,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAC9B,oFAAoF;gBACpF,oCAAoC;gBACpC,wHAAwH;gBACxH,gLAAgL,CACnL;YAED,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAC9B,kJAAkJ;gBAClJ,iDAAiD;gBACjD,8IAA8I;gBAC9I,8JAA8J;gBAC9J,+KAA+K;gBAC/K,gFAAgF;gBAEhF,0CAA0C;gBAC1C,kEAAkE;gBAClE,0BAA0B;gBAC1B,4BAA4B;gBAC5B,gCAAgC;gBAChC,4BAA4B;gBAC5B,aAAa;gBAEb,mEAAmE;gBACnE,mDAAmD;gBACnD,wDAAwD;gBACxD,mCAAmC;gBACnC,uCAAuC;gBACvC,oBAAoB;gBACpB,YAAY;gBAEZ,8DAA8D;gBAC9D,0BAA0B;gBAC1B,iFAAiF;gBACjF,gDAAgD;gBAChD,2DAA2D;gBAC3D,mBAAmB;gBACnB,aAAa;gBAEb,iBAAiB;gBACjB,kUAAkU;gBAClU,gNAAgN;gBAChN,qLAAqL;gBACrL,2FAA2F,CAC9F;YAED,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE;gBACjC,sJAAsJ;gBACtJ,MAAM;gBACN,2CAA2C;gBAC3C,kDAAkD;gBAClD,OAAO;gBACP,oDAAoD;gBACpD,0JAA0J;gBAC1J,qKAAqK;gBACrK,sHAAsH;gBACtH,uEAAuE;gBAEvE,0CAA0C;gBAC1C,kEAAkE;gBAClE,wBAAwB;gBACxB,4BAA4B;gBAC5B,gCAAgC;gBAChC,4BAA4B;gBAC5B,aAAa;gBAEb,mEAAmE;gBACnE,iEAAiE;gBACjE,uBAAuB;gBACvB,4BAA4B;gBAC5B,qDAAqD;gBACrD,oBAAoB;gBACpB,SAAS;gBACT,YAAY;gBAEZ,iBAAiB;gBACjB,kQAAkQ;gBAClQ,gMAAgM;gBAChM,8FAA8F,CACjG;YAED,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAC9B,iMAAiM;gBACjM,yDAAyD;gBACzD,2KAA2K;gBAC3K,gKAAgK;gBAChK,sHAAsH;gBACtH,+FAA+F;gBAC/F,4LAA4L;gBAE5L,0CAA0C;gBAC1C,kEAAkE;gBAClE,2BAA2B;gBAC3B,4BAA4B;gBAC5B,4BAA4B;gBAC5B,aAAa;gBAEb,mEAAmE;gBACnE,uCAAuC;gBACvC,sBAAsB;gBACtB,aAAa;gBAEb,iEAAiE;gBACjE,4CAA4C;gBAC5C,oCAAoC;gBACpC,+BAA+B;gBAC/B,6BAA6B;gBAC7B,qCAAqC;gBACrC,6CAA6C;gBAC7C,sDAAsD;gBACtD,gCAAgC;gBAChC,iCAAiC;gBACjC,oBAAoB;gBACpB,SAAS;gBACT,mDAAmD;gBACnD,sCAAsC;gBACtC,MAAM;gBACN,6CAA6C;gBAC7C,4BAA4B;gBAC5B,0DAA0D;gBAC1D,oBAAoB;gBACpB,QAAQ;gBACR,MAAM;gBACN,qEAAqE;gBACrE,sDAAsD;gBACtD,MAAM;gBACN,+EAA+E;gBAC/E,6EAA6E;gBAC7E,YAAY;gBAGZ,iBAAiB;gBACjB,+QAA+Q;gBAC/Q,8FAA8F,CACjG;YAED,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAC9B,0HAA0H;gBAC1H,qFAAqF;gBACrF,8EAA8E;gBAC9E,4JAA4J;gBAC5J,mNAAmN;gBACnN,mJAAmJ;gBACnJ,gIAAgI;gBAChI,2BAA2B;gBAC3B,qCAAqC;gBACrC,6CAA6C;gBAC7C,uBAAuB;gBACvB,4BAA4B;gBAC5B,0CAA0C;gBAC1C,+DAA+D;gBAC/D,wBAAwB;gBACxB,kBAAkB;gBAElB,iEAAiE;gBACjE,qBAAqB;gBACrB,mBAAmB;gBACnB,iCAAiC;gBACjC,yCAAyC;gBACzC,mBAAmB;gBACnB,oBAAoB;gBAEpB,UAAU;gBAEV,2GAA2G;gBAC3G,4IAA4I;gBAC5I,4FAA4F;gBAC5F,mHAAmH,CACtH;YAED;;;;;;;;;;;cAWE;SACL;QAED,6BAA6B,EAAE,MAAM,CAAC,mBAAmB,CACrD,uJAAuJ;YACvJ,sKAAsK;YACtK,iHAAiH;YACjH,+HAA+H;YAC/H,iGAAiG;YACjG,qJAAqJ,CACxJ;QAED,+BAA+B,EAAE,MAAM,CAAC,mBAAmB,CACvD,MAAM,CAAC,6BAA6B,CAChC,4CAA4C,CAC/C,CACJ;QACD;;;;;;;;;;;;;;;;;UAiBE;QACF,YAAY,EAAE;YACV,MAAM,CAAC,mBAAmB,CACtB,iEAAiE,CACpE;SACJ;QAED,MAAM,EAAE;YACJ,2DAA2D;YAC3D,8FAA8F;YAC9F,EAAE,QAAQ,EAAE,uBAAuB,EAAE,UAAU,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,eAAe,EAAE,eAAe,CAAC,EAAE;YAC5I,4DAA4D;YAC5D,EAAE,QAAQ,EAAE,cAAc,EAAE,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YACpD,kDAAkD;SACrD;QAED,WAAW,EAAE,CAAC;QAEd,WAAW,EAAE,iHAAa,CAAC,wGAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACpF,qDAAqD;QAErD,kBAAkB,EAAE,CAAC,CAAO,EAAE,EAAE;YAE5B,IAAI,GAAG,GAAG,CAAC,CAAC,eAAe,CAAC,uBAAuB,CAAC,CAAC;YACrD,IAAI,GAAG,GAAG,CAAC,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAC5C,IAAI,IAAI,GAAyB,IAAI,iFAAoB,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC3E,gHAAgH;YAChH,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YAChC,IAAI,WAAW,GAAG,sFAAqB,CAAC,GAAG,CAAC,CAAC;YAC7C,OAAO,CAAC,GAAG,CAAC,6DAA6D,EAAE,WAAW,CAAC,CAAC;YAGxF,CAAC,CAAC,wBAAwB,GAAG,IAAI,CAAC;YAElC,CAAC,CAAC,iBAAiB,GAAG,GAAG,EAAE;gBACvB,kDAAkD;gBAClD,qCAAqC;gBACrC,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;gBACnD,MAAM,CAAC,qBAAqB,CAAC,0CAA0C,GAAG,OAAO,CAAC,CAAC;gBACnF,MAAM,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;gBAC1C,MAAM,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;YACpD,CAAC;YAGD,CAAC,CAAC,aAAa,GAAG,GAAG,EAAE;gBAEnB,kCAAkC;gBAClC,0CAA0C;gBAC1C,uDAAuD;gBACvD,MAAM,CAAC,WAAW,EAAE,CAAC;gBAErB,mDAAmD;gBACnD,6EAA6E;gBAC7E,MAAM,CAAC,qBAAqB,CAAC;;;;kDAIK,IAAI;;;mDAGH,WAAW;;;;iBAI7C,CAAC,CAAC;gBACH,CAAC,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC;YACpC,CAAC,CAAC;YAEF,CAAC,CAAC,+BAA+B,GAAG,GAAG,EAAE;gBACrC,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAEvB,uBAAuB;gBACvB,IAAI,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;oBACtC,MAAM,CAAC,qBAAqB,CAAC,uBAAuB,GAAE,yBAAyB,GAAG,CAAC,CAAC,YAAY,GAAG,IAAI,GAAG,SAAS,GAAG,QAAQ,CAAC,CAAC;gBACpI,CAAC;qBAAM,CAAC;oBACJ,MAAM,CAAC,2BAA2B,CAAC,MAAM,CAAC,6BAA6B,CAAC,uBAAuB,GAAG,CAAC,CAAC,YAAY,GAAG,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC;gBAC1I,CAAC;gBAED,qBAAqB;YACzB,CAAC,CAAC;QACN,CAAC;KACJ,CAAC;AACN,CAAC,CAAC;AAEF,4HAAkB,CAAC,iCAAiC,CAAC,CAAC","sources":["webpack://Experimentation/./2025_my_test/typescript/code/Feature_count_states_2.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Automata/Automata.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Automata/Automata_Configurator.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Automata/Automata_Forwarder.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Automata/Transitions.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Automata_Forwarders/Automata_With_Output_Forwarder.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Automata_Forwarders/Book_Forwarder.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Automata_Forwarders/Experiment_Forwarder.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Automata_Forwarders/Experimentation_Forwarder.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Automata_Forwarders/Questionnaire_Forwarder.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Automata_Forwarders/Training_Execution_Forwarder.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Books/Sequential_Forwarder_Forwarder.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/Browser_Output_Writer.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/Code_Experiment_Definition.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/Experiment_Definition.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/Experimentation.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/Task.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/Training_Configuration.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/functions/create_code_experiment_execution.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/treatments/Independent_Variable.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/treatments/Independent_Variables.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/treatments/Treatment.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/treatments/Treatment_Combination.js","webpack://Experimentation/./N-of-1-Experimentation/modules/Experimentation/treatments/Treatments_Combinator.js","webpack://Experimentation/./N-of-1-Experimentation/modules/utils/Utils.js","webpack://Experimentation/./N-of-1-Experimentation/modules/utils/Utils_Test.js","webpack://Experimentation/./N-of-1-Experimentation/modules/utils/arrays/all_array_combinations.js","webpack://Experimentation/./N-of-1-Experimentation/modules/utils/loops/loop.js","webpack://Experimentation/./N-of-1-Experimentation/modules_hard_import/seedrandom/seedrandom.js","webpack://Experimentation/webpack/bootstrap","webpack://Experimentation/webpack/runtime/define property getters","webpack://Experimentation/webpack/runtime/hasOwnProperty shorthand","webpack://Experimentation/webpack/runtime/make namespace object","webpack://Experimentation/./2025_my_test/typescript/experiment_count_states.ts"],"sourcesContent":["function WS(num) {\n    return \"&nbsp;\".repeat(num);\n}\nclass Code_Writer {\n    constructor(arr) { this.arr = arr; }\n    write(a) { this.arr.push(a); }\n    writeln(a) { this.arr.push(a + \"<br>\"); }\n}\nclass Simple_Code_Writer extends Code_Writer {\n    constructor(arr) { super(arr); }\n    getRandomInt(max) {\n        return Math.floor(Math.random() * max);\n    }\n    getRandomIntBetween(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    write_code_block(hasError, lines) {\n        let error_pos = -1;\n        //this.write(\"<td style='border: 1px solid black;'>\");\n        if (hasError) {\n            error_pos = this.getRandomInt(lines.length);\n        }\n        lines.forEach((line, index) => {\n            console.log(\"this is the line:\", line);\n            if (index === error_pos) {\n                const randIndex = this.getRandomInt(line.length + 1);\n                line = line.slice(0, randIndex) + \"!\" + line.slice(randIndex);\n            }\n            line = line.replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\").replace(/ /g, \"&nbsp;\");\n            this.writeln(line);\n        });\n        //this.write(\"</td>\");\n    }\n    getRandomActionNameOld(count) {\n        const chars = ['k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u'];\n        if (count > chars.length)\n            throw new Error('Too many requested characters');\n        return this.fisherYatesShuffle(chars).slice(0, count);\n    }\n    getRandomActionName(count, states) {\n        const chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u'];\n        // Filter out any chars that are in states\n        const availableChars = chars.filter(char => !states.includes(char));\n        if (count > availableChars.length)\n            throw new Error('Too many requested characters');\n        return this.fisherYatesShuffle(availableChars).slice(0, count);\n    }\n    getRandomStateName(count) {\n        const chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u'];\n        if (count > chars.length)\n            throw new Error('Too many requested characters');\n        return this.fisherYatesShuffle(chars).slice(0, count);\n    }\n    // avoids bias when shuffling\n    fisherYatesShuffle(array) {\n        const arr = [...array]; // copy to avoid mutating original\n        for (let i = arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [arr[i], arr[j]] = [arr[j], arr[i]]; // swap\n        }\n        return arr;\n    }\n    shuffleArray(array) {\n        // Fisher-Yates shuffle algorithm\n        const arr = [...array];\n        for (let i = arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        return arr;\n    }\n    removeRandomElements(array, count) {\n        const copy = [...array];\n        for (let i = 0; i < count; i++) {\n            const index = Math.floor(Math.random() * copy.length);\n            copy.splice(index, 1);\n        }\n        return copy;\n    }\n    calculate_expression(expr) {\n        //console.log(\"calculate_expression with this exp: \", expr);\n        let operator;\n        let operands;\n        // Remove all white spaces and handle simple arithmetic expressions\n        expr = expr.replace(/\\s+/g, '');\n        // Replace any non-numeric characters with nothing (sanitize to avoid code injection)\n        const sanitizedExpr = expr.replace(/[^0-9+\\-*/().]/g, '');\n        //console.log(\"this is the expression: \", sanitizedExpr);\n        if (sanitizedExpr.includes('+')) {\n            operator = '+';\n            operands = sanitizedExpr.split('+');\n        }\n        else if (sanitizedExpr.includes('-')) {\n            operator = '-';\n            operands = sanitizedExpr.split('-');\n        }\n        else {\n            //console.log(\"THIS IS HERE: \", sanitizedExpr);\n            return Number(sanitizedExpr);\n        }\n        // Convert operands to numbers\n        const num1 = Number(operands[0]);\n        const num2 = Number(operands[1]);\n        // Perform the operation based on the operator\n        if (operator === '+') {\n            return num1 + num2;\n        }\n        else {\n            return num1 - num2;\n        }\n    }\n    get_actions_from_types(actionNames, stateNames, actionTypes) {\n        const actions = [];\n        actionNames.forEach(actionName => {\n            let action_type = actionTypes[this.getRandomInt(actionTypes.length)];\n            const variableValue = \"\" + this.getRandomInt(10);\n            const stateValue1 = stateNames[this.getRandomInt(stateNames.length)];\n            const stateValue2 = stateNames[this.getRandomInt(stateNames.length)];\n            const stateValue3 = stateNames[this.getRandomInt(stateNames.length)];\n            const processedLines = action_type.map(line => {\n                let newLine = line.replace(/\\$variable/g, variableValue);\n                newLine = newLine.replace(/\\$action/g, actionName);\n                const operator = Math.random() < 0.5 ? '+' : '-';\n                newLine = newLine.replace(/\\$\\+\\-/g, operator);\n                // Replace first $state with stateValue1, second with stateValue2\n                let stateCount = 0;\n                newLine = newLine.replace(/\\$state/g, () => {\n                    stateCount++;\n                    if (stateCount === 1)\n                        return stateValue1;\n                    if (stateCount === 2)\n                        return stateValue2;\n                    return stateValue3; // Return stateValue3 for the third $state\n                });\n                return newLine;\n            });\n            actions.push(processedLines);\n        });\n        return actions;\n    }\n    get_actions_from_types_with_difficulty(actionNames, stateNames, actionTypes, difficulty, targetState, smt) {\n        // difficulty 1 easy, difficulty 2 hard\n        const actions = [];\n        // filtered Array of stateNames without targetState\n        const filteredStateNames = stateNames.filter(state => state !== targetState);\n        // ActionType that sets a state directly to value\n        //let easyActionType = actionTypes[4];\n        const targetStateAppears = Math.random() < 0.5;\n        actionNames.forEach((actionName, index) => {\n            const isLast = index === actionNames.length - 1;\n            let action_type;\n            // random boolean to determine if easy difficulty is actiontype4 or if targetstate is not in the actions\n            console.log(\"targetStateAppears\", targetStateAppears);\n            if (isLast && difficulty == 1 && targetStateAppears) {\n                //Easy Action Type / ActionType that sets a state directly to value\n                action_type = actionTypes[4];\n            }\n            else {\n                action_type = actionTypes[this.getRandomInt(actionTypes.length)];\n            }\n            const variableValue = \"\" + this.getRandomInt(10);\n            let stateValue1;\n            let stateValue2;\n            let stateValue3;\n            if (difficulty == 1) {\n                stateValue1 = filteredStateNames[this.getRandomInt(filteredStateNames.length)];\n                stateValue2 = filteredStateNames[this.getRandomInt(filteredStateNames.length)];\n                stateValue3 = filteredStateNames[this.getRandomInt(filteredStateNames.length)];\n            }\n            else {\n                stateValue1 = stateNames[this.getRandomInt(stateNames.length)];\n                stateValue2 = stateNames[this.getRandomInt(stateNames.length)];\n                stateValue3 = stateNames[this.getRandomInt(stateNames.length)];\n            }\n            const processedLines = action_type.map(line => {\n                let newLine = line.replace(/\\$variable/g, variableValue);\n                newLine = newLine.replace(/\\$action/g, actionName);\n                const operator = Math.random() < 0.5 ? '+' : '-';\n                newLine = newLine.replace(/\\$\\+\\-/g, operator);\n                // Replace first $state with stateValue1, second with stateValue2\n                let stateCount = 0;\n                //if (smt == \"Context\") {\n                console.log(\"-\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\nsmt is: \", smt);\n                if (smt.includes(\"Context\")) {\n                    console.log(\"/\\n/\\n/\\n/\\n/\\n/\\n/\\n in here\");\n                    newLine = newLine.replace(/\\$state/g, () => {\n                        stateCount++;\n                        console.log(\"stateValue1\", stateValue1);\n                        // the action_type on isLast is already the easy one (just one State)\n                        if (stateCount === 1 && difficulty == 1 && isLast && targetStateAppears)\n                            return targetState.toUpperCase();\n                        if (stateCount === 1)\n                            return stateValue1.toUpperCase();\n                        if (stateCount === 2)\n                            return stateValue2;\n                        return stateValue3; // Return stateValue3 for the third $state\n                    });\n                }\n                else {\n                    newLine = newLine.replace(/\\$state/g, () => {\n                        stateCount++;\n                        // the action_type on isLast is already the easy one (just one State)\n                        if (stateCount === 1 && difficulty == 1 && isLast && targetStateAppears)\n                            return targetState;\n                        if (stateCount === 1)\n                            return stateValue1;\n                        if (stateCount === 2)\n                            return stateValue2;\n                        return stateValue3; // Return stateValue3 for the third $state\n                    });\n                }\n                return newLine;\n            });\n            actions.push(processedLines);\n        });\n        return actions;\n    }\n    get_actions_from_types_with_error(actionNames, stateNames, actionTypes, hasError) {\n        const actions = [];\n        actionNames.forEach(actionName => {\n            let action_type = actionTypes[this.getRandomInt(actionTypes.length)];\n            // If hasError, remove one random \"$state\" occurrence before processing\n            if (hasError) {\n                const flatLines = action_type.flatMap((line, index) => {\n                    const occurrences = [...line.matchAll(/\\$state/g)].map(match => ({\n                        lineIndex: index,\n                        startIndex: match.index\n                    }));\n                    return occurrences;\n                });\n                if (flatLines.length > 0) {\n                    const toRemove = flatLines[this.getRandomInt(flatLines.length)];\n                    const { lineIndex, startIndex } = toRemove;\n                    const targetLine = action_type[lineIndex];\n                    action_type[lineIndex] =\n                        targetLine.slice(0, startIndex) +\n                            targetLine.slice(startIndex + 6); // \"$state\" is 6 characters\n                }\n            }\n            const variableValue = \"\" + this.getRandomInt(10);\n            const stateValue1 = stateNames[this.getRandomInt(stateNames.length)];\n            const stateValue2 = stateNames[this.getRandomInt(stateNames.length)];\n            const stateValue3 = stateNames[this.getRandomInt(stateNames.length)];\n            const processedLines = action_type.map(line => {\n                let newLine = line.replace(/\\$variable/g, variableValue);\n                newLine = newLine.replace(/\\$action/g, actionName);\n                const operator = Math.random() < 0.5 ? '+' : '-';\n                newLine = newLine.replace(/\\$\\+\\-/g, operator);\n                let stateCount = 0;\n                newLine = newLine.replace(/\\$state/g, () => {\n                    stateCount++;\n                    if (stateCount === 1)\n                        return stateValue1;\n                    if (stateCount === 2)\n                        return stateValue2;\n                    return stateValue3;\n                });\n                return newLine;\n            });\n            actions.push(processedLines);\n        });\n        return actions;\n    }\n    // JOTAI PART\n    get_jotai_action_types() {\n        const action_one = [\n            \"const $action = atom(\",\n            \"    null,\",\n            \"    (get, set) => {\",\n            \"        set($state, get($state) $+- $variable )\",\n            \"    }\",\n            \");\",\n        ];\n        const action_two = [\n            \"const $action = atom(\",\n            \"    null,\",\n            \"    (get, set) => {\",\n            \"        set($state, $variable $+- get($state))\",\n            \"    }\",\n            \");\",\n        ];\n        const action_three = [\n            \"const $action = atom(\",\n            \"    null,\",\n            \"    (get, set) => {\",\n            \"        set($state, get($state) $+- get($state) )\",\n            \"    }\",\n            \");\",\n        ];\n        const action_four = [\n            \"const $action = atom(\",\n            \"    null,\",\n            \"    (get, set) => {\",\n            \"        set($state, get($state))\",\n            \"    }\",\n            \");\",\n        ];\n        const action_five = [\n            \"const $action = atom(\",\n            \"    null,\",\n            \"    (get, set) => {\",\n            \"        set($state, $variable)\",\n            \"    }\",\n            \");\",\n        ];\n        return [action_one, action_two, action_three, action_four, action_five];\n    }\n    get_jotai_states(stateNames) {\n        const states = [];\n        const initialStateValues = {}; // We will store initial values here\n        stateNames.forEach(stateName => {\n            const initialValue = this.getRandomInt(10); // Generate the random initial value\n            let state = \"const $stateName = atom($value);\";\n            state = state.replace(\"$stateName\", stateName).replace(\"$value\", \"\" + initialValue);\n            states.push(state);\n            // Save the state name and its initial value in the map\n            initialStateValues[stateName] = initialValue;\n        });\n        return { states, initialStateValues }; // Return both the raw state code and initial state values\n    }\n    write_jotai_code(hasError, difficulty, smt, errorType, correctStateGroup) {\n        // Step 1: Determine number of correct states\n        let amountStates = 0;\n        if (correctStateGroup === 0) {\n            amountStates = this.getRandomIntBetween(0, 3);\n        }\n        else {\n            amountStates = this.getRandomIntBetween(5, 8);\n        }\n        //const amountStates = this.getRandomIntBetween(3,9);\n        const amountActions = this.getRandomIntBetween(3, 6);\n        const stateNames = this.getRandomStateName(amountStates);\n        const actionNames = this.getRandomActionName(amountActions, stateNames);\n        const { states, initialStateValues } = this.get_jotai_states(stateNames); // Get both the state code and initial values\n        // Pick 1 random target state to observe\n        const targetState = stateNames[this.getRandomInt(stateNames.length)];\n        //const targetState = \"NONE\";\n        // actionNames: string[], stateNames: string[], actionTypes: string[][], difficulty: number, targetState: string, smt: string\n        const actions = this.get_actions_from_types_with_difficulty(actionNames, stateNames, this.get_jotai_action_types(), difficulty, targetState, smt); //Generate with Error\n        // this is new for the test:\n        // Prepare units: states are strings, actions are string[] (with empty line at start)\n        const units = [\n            ...states,\n            ...actions.map(actionBlock => [\"\", ...actionBlock])\n        ];\n        // Shuffle the units\n        for (let i = units.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [units[i], units[j]] = [units[j], units[i]];\n        }\n        // Flatten the result: if unit is string, just push; if unit is string[], push all\n        const mixedLines = [];\n        for (const unit of units) {\n            if (typeof unit === \"string\") {\n                mixedLines.push(unit);\n            }\n            else {\n                mixedLines.push(...unit);\n            }\n        }\n        // Final lines\n        const lines = [\n            //\"import {atom} from 'jotai';\",\n            //\"\",\n            ...mixedLines\n        ];\n        this.writeln(\"<div class='block'>\");\n        // Formatting and writing output\n        lines.forEach(line => {\n            line = line.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/ /g, \"&nbsp;\");\n            this.writeln(line);\n        });\n        this.writeln(\"</div>\");\n        return String(stateNames.length);\n    }\n    // REDUX PART\n    get_redux_action_types() {\n        const action_one = [\n            \"       $action: (state) => {\",\n            \"           state.$state = state.$state $+- $variable;\",\n            \"       },\",\n        ];\n        const action_two = [\n            \"       $action: (state) => {\",\n            \"           state.$state = $variable $+- state.$state;\",\n            \"       },\",\n        ];\n        const action_three = [\n            \"       $action: (state) => {\",\n            \"           state.$state = state.$state $+- state.$state;\",\n            \"       },\",\n        ];\n        const action_four = [\n            \"       $action: (state) => {\",\n            \"           state.$state = state.$state;\",\n            \"       },\",\n        ];\n        const action_five = [\n            \"       $action: (state) => {\",\n            \"           state.$state = $variable;\",\n            \"       },\",\n        ];\n        return [action_one, action_two, action_three, action_four, action_five];\n    }\n    write_redux_code(hasError, difficulty, smt, errorType, correctStateGroup) {\n        // Step 1: Determine number of correct states\n        let amountCorrectStates = 0;\n        if (correctStateGroup === 0) {\n            amountCorrectStates = this.getRandomIntBetween(0, 3);\n        }\n        else {\n            amountCorrectStates = this.getRandomIntBetween(5, 8);\n        }\n        // Generate a pool of unique state names\n        const fullPool = this.getRandomStateName(amountCorrectStates + this.getRandomIntBetween(3, 5));\n        const correctStateNames = this.shuffleArray([...fullPool]).slice(0, amountCorrectStates);\n        const remainingStateNames = fullPool.filter(name => !correctStateNames.includes(name));\n        // Assign initial values to correct states\n        const initialStateMap = {};\n        for (const name of correctStateNames) {\n            initialStateMap[name] = this.getRandomInt(10);\n        }\n        // Generate actions based only on correct states\n        const amountActions = this.getRandomIntBetween(3, 6);\n        const actionNames = this.getRandomActionName(amountActions, correctStateNames);\n        const targetState = correctStateNames[this.getRandomInt(correctStateNames.length)];\n        const actions = this.get_actions_from_types_with_difficulty(actionNames, fullPool, this.get_redux_action_types(), difficulty, targetState, smt);\n        const clonedActions = [...actions];\n        // Shuffle cloned actions\n        for (let i = clonedActions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [clonedActions[i], clonedActions[j]] = [clonedActions[j], clonedActions[i]];\n        }\n        // Step 2: Inject errors by adding false states randomly\n        let adjustedStateNames1 = [];\n        let adjustedStateNames2 = [];\n        if (!hasError) {\n            adjustedStateNames1 = [...correctStateNames];\n            adjustedStateNames2 = [...correctStateNames];\n        }\n        else {\n            const falseStates1 = [];\n            const falseStates2 = [];\n            const shuffledRemaining = this.shuffleArray([...remainingStateNames]);\n            for (const name of shuffledRemaining) {\n                const target = this.getRandomIntBetween(1, 2); // Either list 1 or 2\n                if (target === 1)\n                    falseStates1.push(name);\n                else\n                    falseStates2.push(name);\n            }\n            adjustedStateNames1 = [...correctStateNames, ...falseStates1];\n            adjustedStateNames2 = [...correctStateNames, ...falseStates2];\n        }\n        const shuffledBlock1 = this.shuffleArray([...adjustedStateNames1]);\n        const shuffledInitial = this.shuffleArray([...adjustedStateNames2]);\n        const lines = [\n            //\"import { createSlice } from '@reduxjs/toolkit'\",\n            //\"import { useDispatch, useSelector } from 'react-redux'\",\n            //\"\",\n            \"interface testState {\",\n            ...shuffledBlock1.map(stateName => `   ${stateName}: number,`),\n            \"}\",\n            \"\",\n            \"const initialState: testState = {\",\n            ...shuffledInitial.map((stateName) => {\n                var _a;\n                const value = (_a = initialStateMap[stateName]) !== null && _a !== void 0 ? _a : this.getRandomInt(10);\n                return `   ${stateName}: ${value},`;\n            }),\n            \"}\",\n            \"\",\n            \"export const testSlice = createSlice({\",\n            \"   name: 'testState',\",\n            \"   initialState,\",\n            \"   reducers: {\",\n            ...clonedActions.reduce((acc, action) => {\n                acc.push(\"\");\n                return acc.concat(action);\n            }, []),\n            \"   },\",\n            \"});\",\n            \"\",\n            `export const { ${actionNames.join(', ')} } = testSlice.actions;`,\n            \"export default testSlice.reducer\",\n            \"\",\n            \"export const store = configureStore({\",\n            \"   reducer: {\",\n            \"       testSlice: testSlice.reducer\",\n            \"   },\",\n            \"})\",\n            \"\",\n            \"export type RootState = ReturnType&lt;typeof store.getState&gt;\",\n            \"export type AppDispatch = typeof store.dispatch;\",\n            \"\",\n            \"export const useAppDispatch = useDispatch.withTypes&lt;AppDispatch&gt();\",\n            \"export const useAppSelector = useSelector.withTypes&lt;RootState&gt();\"\n        ];\n        this.writeln(\"<div class='block'>\");\n        lines.forEach(line => {\n            line = line.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/ /g, \"&nbsp;\");\n            this.writeln(line);\n        });\n        this.writeln(\"</div>\");\n        // Step 3: Return match count for testing\n        const set1 = new Set(adjustedStateNames1);\n        const set2 = new Set(adjustedStateNames2);\n        let equalCount = 0;\n        for (const name of correctStateNames) {\n            if (set1.has(name) && set2.has(name)) {\n                equalCount++;\n            }\n        }\n        console.log(\"equalCount: \", equalCount);\n        console.log(\"amountCorrectStates: \", amountCorrectStates);\n        return String(equalCount);\n    }\n    write_redux_code_old(hasError, difficulty, smt, errorType) {\n        const amountStates = this.getRandomIntBetween(3, 9);\n        const amountActions = this.getRandomIntBetween(3, 6);\n        const stateNames = this.getRandomStateName(amountStates);\n        const actionNames = this.getRandomActionName(amountActions, stateNames);\n        const initialStateValues = [];\n        for (const stateName of stateNames) {\n            let randomValue = this.getRandomInt(10);\n            initialStateValues.push(randomValue);\n        }\n        // Pick 1 random target state to observe\n        const targetState = stateNames[this.getRandomInt(stateNames.length)];\n        // actionNames: string[], stateNames: string[], actionTypes: string[][], difficulty: number, targetState: string, smt: string\n        const actions = this.get_actions_from_types_with_difficulty(actionNames, stateNames, this.get_redux_action_types(), difficulty, targetState, smt); //Generate with Error\n        const clonedActions = [...actions]; // shallow copy\n        // Shuffle in-place\n        for (let i = clonedActions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [clonedActions[i], clonedActions[j]] = [clonedActions[j], clonedActions[i]];\n        }\n        //Kann pro Feld max Hälfte löschen\n        // Fehlerfall 1:\n        const adjustedStateNames1 = hasError\n            ? this.removeRandomElements(stateNames, Math.floor(Math.random() * stateNames.length / 2) + 1)\n            : stateNames;\n        // Fehlerfall 2:\n        const adjustedStateNames2 = hasError\n            ? this.removeRandomElements(stateNames, Math.floor(Math.random() * stateNames.length / 2) + 1)\n            : stateNames;\n        const shuffled2 = this.shuffleArray(adjustedStateNames2);\n        const lines = [\n            //\"import { createSlice } from '@reduxjs/toolkit'\",\n            //\"import { useDispatch, useSelector } from 'react-redux'\",\n            //\"\",\n            \"interface testState {\",\n            ...adjustedStateNames1.map(stateName => `   ${stateName}: number,`),\n            \"}\",\n            \"\",\n            \"const initialState: testState = {\",\n            ...shuffled2.map((stateName, index) => `   ${stateName}: ${initialStateValues[index]},`),\n            \"}\",\n            \"\",\n            \"export const testSlice = createSlice({\",\n            \"   name: 'testState',\",\n            \"   initialState,\",\n            \"   reducers: {\",\n            ...clonedActions.reduce((acc, action) => {\n                acc.push(\"\"); // add empty line before each action\n                return acc.concat(action);\n            }, []),\n            \"   },\",\n            \"});\",\n            \"\",\n            `export const { ${actionNames.join(', ')} } = testSlice.actions;`,\n            \"export default testSlice.reducer\",\n            \"\",\n            \"export const store = configureStore({\",\n            \"   reducer: {\",\n            \"       testSlice.reducer\",\n            \"   },\",\n            \"})\",\n            \"\",\n            \"export type RootState = ReturnType&lt;typeof store.getState&gt;\",\n            \"export type AppDispatch = typeof store.dispatch;\",\n            \"\",\n            \"export const useAppDispatch = useDispatch.withTypes&lt;AppDispatch&gt();\",\n            \"export const useAppSelector = useSelector.withTypes&lt;RootState&gt();\"\n        ];\n        this.writeln(\"<div class='block'>\");\n        // Formatting and writing output\n        lines.forEach(line => {\n            line = line.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/ /g, \"&nbsp;\");\n            this.writeln(line);\n        });\n        this.writeln(\"</div>\");\n        const set1 = new Set(adjustedStateNames1);\n        const set2 = new Set(adjustedStateNames2);\n        let equalCount = 0;\n        for (const item of set1) {\n            if (set2.has(item)) {\n                equalCount++;\n            }\n        }\n        return String(equalCount);\n        //return String(stateNames.length);\n    }\n    // ZUSTAND PART\n    get_zustand_action_types() {\n        const action_one = [\n            \"   $action: () => {\",\n            \"       set((state) => {$state: state.$state $+- $variable})\",\n            \"   },\"\n        ];\n        const action_two = [\n            \"   $action: () => {\",\n            \"       set((state) => {$state: $variable $+- state.$state})\",\n            \"   },\"\n        ];\n        const action_three = [\n            \"   $action: () => {\",\n            \"       set((state) => {$state: state.$state $+- state.$state})\",\n            \"   },\"\n        ];\n        const action_four = [\n            \"   $action: () => {\",\n            \"       set((state) => {$state: state.$state})\",\n            \"   },\"\n        ];\n        const action_five = [\n            \"   $action: () => {\",\n            \"       set((state) => {$state: $variable})\",\n            \"   },\"\n        ];\n        return [action_one, action_two, action_three, action_four, action_five];\n    }\n    write_zustand_code(hasError, difficulty, smt, errorType, correctStateGroup) {\n        var _a;\n        // Step 1: Determine number of correct states\n        let amountCorrectStates = 0;\n        if (correctStateGroup === 0) {\n            amountCorrectStates = this.getRandomIntBetween(0, 3);\n        }\n        else {\n            amountCorrectStates = this.getRandomIntBetween(5, 8);\n        }\n        // Generate a pool of unique state names\n        const totalAvailableStateNames = this.getRandomStateName(amountCorrectStates + this.getRandomIntBetween(3, 5));\n        const correctStateNames = this.shuffleArray([...totalAvailableStateNames]).slice(0, amountCorrectStates);\n        const remainingStateNames = totalAvailableStateNames.filter(name => !correctStateNames.includes(name));\n        console.log(\"correctStateNames: \", correctStateNames);\n        console.log(\"remainingStateNames: \", remainingStateNames);\n        // Assign initial values to correct states\n        const initialStateMap = {};\n        for (const name of correctStateNames) {\n            initialStateMap[name] = this.getRandomInt(10);\n        }\n        // Generate actions based only on correct states\n        const amountActions = this.getRandomIntBetween(3, 6);\n        const actionNames = this.getRandomActionName(amountActions, totalAvailableStateNames);\n        const targetState = correctStateNames[this.getRandomInt(correctStateNames.length)];\n        const actions = this.get_actions_from_types_with_difficulty(actionNames, totalAvailableStateNames, this.get_zustand_action_types(), difficulty, targetState, smt);\n        // Step 2: Adjust state usage in two separate parts of the code\n        let adjustedStateNames1 = [];\n        let adjustedStateNames2 = [];\n        if (!hasError) {\n            adjustedStateNames1 = [...correctStateNames];\n            adjustedStateNames2 = [...correctStateNames];\n        }\n        else {\n            // Distribute remaining states between 1 or both adjusted sets, avoiding complete overlap\n            const shuffledRemaining = this.shuffleArray([...remainingStateNames]);\n            const extra1 = [];\n            const extra2 = [];\n            for (const name of shuffledRemaining) {\n                const target = this.getRandomIntBetween(1, 2); // Either 1 or 2\n                if (target === 1) {\n                    extra1.push(name);\n                }\n                else {\n                    extra2.push(name);\n                }\n            }\n            adjustedStateNames1 = [...correctStateNames, ...extra1];\n            adjustedStateNames2 = [...correctStateNames, ...extra2];\n            console.log(\"adjustedStateNames1: \", adjustedStateNames1);\n            console.log(\"adjustedStateNames2: \", adjustedStateNames2);\n        }\n        // Step 3: Create type/interface part\n        const statesAndActionsBeforeShuffle = [\n            ...adjustedStateNames1.map(stateName => `   ${stateName}: number,`),\n            ...actionNames.map(actionName => `   ${actionName}: () => void,`)\n        ];\n        const statesAndActions = this.shuffleArray(statesAndActionsBeforeShuffle); // in-place shuffle\n        // Step 4: Create useTestState implementation part\n        const entries = [];\n        for (const name of adjustedStateNames2) {\n            entries.push(`   ${name}: ${(_a = initialStateMap[name]) !== null && _a !== void 0 ? _a : this.getRandomInt(10)},`);\n        }\n        for (const action of actions) {\n            entries.push(action); // action is a string[]\n        }\n        const combinedEntries = this.shuffleArray(entries).flat();\n        // Step 5: Emit the code\n        const lines = [\n            //\"import { create } from 'zustand'\",\n            //\"\",\n            \"type testState = {\",\n            ...statesAndActions,\n            \"}\",\n            \"\",\n            \"export const useTestState = create&lt;testState&gt;()((set) => ({\",\n            ...combinedEntries,\n            \"\",\n            \"}))\"\n        ];\n        this.writeln(\"<div class='block'>\");\n        lines.forEach(line => {\n            line = line.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/ /g, \"&nbsp;\");\n            this.writeln(line);\n        });\n        this.writeln(\"</div>\");\n        // Step 6: Count overlapping correct state names\n        const set1 = new Set(adjustedStateNames1);\n        const set2 = new Set(adjustedStateNames2);\n        let equalCount = 0;\n        console.log(\"set1: \", adjustedStateNames1, \"set2: \", adjustedStateNames2);\n        for (const name of correctStateNames) {\n            if (set1.has(name) && set2.has(name)) {\n                equalCount++;\n            }\n        }\n        console.log(\"equalCount: \", equalCount);\n        console.log(\"amountCorrectStates: \", amountCorrectStates);\n        return String(equalCount);\n    }\n    write_zustand_code_old(hasError, difficulty, smt, errorType) {\n        const amountStates = this.getRandomIntBetween(3, 9);\n        const amountActions = this.getRandomIntBetween(3, 6);\n        const stateNames = this.getRandomStateName(amountStates);\n        const actionNames = this.getRandomActionName(amountActions, stateNames);\n        const initialStateValues = [];\n        for (const stateName of stateNames) {\n            let randomValue = this.getRandomInt(10);\n            initialStateValues.push(randomValue);\n        }\n        // Pick 1 random target state to observe\n        const targetState = stateNames[this.getRandomInt(stateNames.length)];\n        //const targetState = \"NONE\";\n        const actions = this.get_actions_from_types_with_difficulty(actionNames, stateNames, this.get_zustand_action_types(), difficulty, targetState, smt); //Generate with Error\n        // Fehlerfall 1:\n        const adjustedStateNames1 = hasError\n            ? this.removeRandomElements(stateNames, Math.floor(Math.random() * ((stateNames.length / 2) + 1)) + 1)\n            : stateNames;\n        const statesAndActions = [\n            ...adjustedStateNames1.map(stateName => `   ${stateName}: number,`),\n            ...actionNames.map(actionName => `   ${actionName}: () => void,`)\n        ];\n        // Shuffle the units\n        for (let i = statesAndActions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [statesAndActions[i], statesAndActions[j]] = [statesAndActions[j], statesAndActions[i]];\n        }\n        //useTestState actions and states:\n        const entries = [];\n        // Combine: each state line and each action (multi-line array)\n        // Fehlerfall 2:\n        const adjustedStateNames2 = hasError\n            ? this.removeRandomElements(stateNames, Math.floor(Math.random() * ((stateNames.length / 2) + 1)) + 1)\n            : stateNames;\n        for (let i = 0; i < adjustedStateNames2.length; i++) {\n            entries.push(`   ${adjustedStateNames2[i]}: ${initialStateValues[i]},`);\n        }\n        for (let i = 0; i < actions.length; i++) {\n            entries.push(actions[i]); // actions[i] is an array of strings\n        }\n        // Now shuffle the entries\n        const shuffledEntries = this.shuffleArray(entries);\n        // Finally, flatten the result to a `string[]`\n        const combinedEntries = shuffledEntries.flat();\n        const lines = [\n            //\"import { create } from 'zustand'\",\n            //\"\",\n            \"type testState = {\",\n            ...statesAndActions,\n            \"}\",\n            \"\",\n            \"export const useTestState = create&lt;testState&gt;()((set) => ({\",\n            ...combinedEntries,\n            \"\",\n            \"}))\",\n        ];\n        this.writeln(\"<div class='block'>\");\n        // Formatting and writing output\n        lines.forEach(line => {\n            line = line.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/ /g, \"&nbsp;\");\n            this.writeln(line);\n        });\n        this.writeln(\"</div>\");\n        const set1 = new Set(adjustedStateNames1);\n        const set2 = new Set(adjustedStateNames2);\n        let equalCount = 0;\n        for (const item of set1) {\n            if (set2.has(item)) {\n                equalCount++;\n            }\n        }\n        return String(equalCount);\n        //return String(stateNames.length);\n    }\n    // CONTEXT PART\n    get_context_action_types() {\n        const action_one = [\n            \"   const $action = () => {\",\n            \"       set$state($state $+- $variable);\",\n            \"   };\",\n        ];\n        const action_two = [\n            \"   const $action = () => {\",\n            \"       set$state($variable $+- $state);\",\n            \"   };\",\n        ];\n        const action_three = [\n            \"   const $action = () => {\",\n            \"       set$state($state $+- $state);\",\n            \"   };\",\n        ];\n        const action_four = [\n            \"   const $action = () => {\",\n            \"       set$state($state);\",\n            \"   };\",\n        ];\n        const action_five = [\n            \"   const $action = () => {\",\n            \"       set$state($variable);\",\n            \"   };\",\n        ];\n        return [action_one, action_two, action_three, action_four, action_five];\n    }\n    write_context_code(hasError, difficulty, smt, errorType, correctStateGroup) {\n        var _a;\n        // Step 1: Determine number of correct states based on difficulty\n        let amountCorrectStates = 0;\n        if (correctStateGroup === 0) {\n            amountCorrectStates = this.getRandomIntBetween(0, 3);\n        }\n        else {\n            amountCorrectStates = this.getRandomIntBetween(5, 8);\n        }\n        // Step 2: Generate state and action names\n        const totalAvailableStateNames = this.getRandomStateName(amountCorrectStates + this.getRandomIntBetween(3, 5));\n        const correctStateNames = this.shuffleArray([...totalAvailableStateNames]).slice(0, amountCorrectStates);\n        const remainingStateNames = totalAvailableStateNames.filter(name => !correctStateNames.includes(name));\n        // Map state to initial values\n        const initialStateMap = {};\n        for (const name of correctStateNames) {\n            initialStateMap[name] = this.getRandomInt(10);\n        }\n        // Step 3: Prepare actions\n        const amountActions = this.getRandomIntBetween(3, 6);\n        const actionNames = this.getRandomActionName(amountActions, totalAvailableStateNames);\n        // Pick target state\n        const targetState = correctStateNames[this.getRandomInt(correctStateNames.length)];\n        const actions = this.get_actions_from_types_with_difficulty(actionNames, totalAvailableStateNames, this.get_context_action_types(), difficulty, targetState, smt);\n        // Step 4: Create adjusted state name lists\n        let adjustedStateNames1 = [];\n        let adjustedStateNames2 = [];\n        let adjustedStateNames3 = [];\n        if (!hasError) {\n            adjustedStateNames1 = [...correctStateNames];\n            adjustedStateNames2 = [...correctStateNames];\n            adjustedStateNames3 = [...correctStateNames];\n        }\n        else {\n            // Distribute remaining (false) states into 1 or 2 of the 3 lists, avoiding full overlap\n            const extra1 = [];\n            const extra2 = [];\n            const extra3 = [];\n            const shuffledRemaining = this.shuffleArray([...remainingStateNames]);\n            for (const name of shuffledRemaining) {\n                const targetLists = this.shuffleArray([1, 2, 3]).slice(0, this.getRandomIntBetween(1, 2));\n                if (targetLists.includes(1))\n                    extra1.push(name);\n                if (targetLists.includes(2))\n                    extra2.push(name);\n                if (targetLists.includes(3))\n                    extra3.push(name);\n            }\n            adjustedStateNames1 = [...correctStateNames, ...extra1];\n            adjustedStateNames2 = [...correctStateNames, ...extra2];\n            adjustedStateNames3 = [...correctStateNames, ...extra3];\n        }\n        // Step 5: Build interface entries\n        const statesAndActionsBeforeShuffle = [\n            ...adjustedStateNames1.map(stateName => `   ${stateName}: number,`),\n            ...actionNames.map(actionName => `   ${actionName}: () => void,`)\n        ];\n        const statesAndActions = this.shuffleArray(statesAndActionsBeforeShuffle); // in-place shuffle\n        // Step 6: Build useState entries and actions\n        const entries = [];\n        for (const name of adjustedStateNames2) {\n            entries.push(`   const [${name}, set${name.toUpperCase()}] = useState<number>(${(_a = initialStateMap[name]) !== null && _a !== void 0 ? _a : this.getRandomInt(10)});`);\n        }\n        for (const action of actions) {\n            entries.push(action);\n        }\n        const mixedStateAndActions = this.shuffleArray(entries).flat();\n        // Step 7: Final provider values\n        const statesAndActionNames = this.shuffleArray([...adjustedStateNames3, ...actionNames]);\n        const lines = [\n            //\"import { createContext, useState } from 'react';\",\n            //\"\",\n            \"interface testType {\",\n            ...statesAndActions,\n            \"}\",\n            \"\",\n            \"const TestContext = createContext(testType);\",\n            \"\",\n            \"export const TestProvider = ({children}) => {\",\n            ...mixedStateAndActions,\n            \"\",\n            \"   return (\",\n            //`       &lt;TestContext.Provider value={{ ${stateNames.join(', ')}, ${actionNames.join(', ')} }}&gt;`,\n            `       &lt;TestContext.Provider value={{ ${statesAndActionNames.join(', ')} }}&gt;`,\n            \"           {children}\",\n            \"       &lt;/TestContext.Provider&gt;\",\n            \"   )\",\n            \"}\",\n            \"\",\n            \"export default TestContext;\",\n        ];\n        this.writeln(\"<div class='block'>\");\n        // Formatting and writing output\n        lines.forEach(line => {\n            line = line.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/ /g, \"&nbsp;\");\n            this.writeln(line);\n        });\n        this.writeln(\"</div>\");\n        const set1 = new Set(adjustedStateNames1);\n        const set2 = new Set(adjustedStateNames2);\n        const set3 = new Set(adjustedStateNames3);\n        let equalCount = 0;\n        console.log(\"set1: \", adjustedStateNames1, \"set2: \", adjustedStateNames2, \"set3: \", adjustedStateNames3);\n        for (const item of set1) {\n            if (set2.has(item) && set3.has(item)) {\n                equalCount++;\n            }\n        }\n        console.log(\"equalCount: \", equalCount);\n        console.log(\"amountCorrectStates: \", amountCorrectStates);\n        return String(equalCount);\n        //return String(stateNames.length);\n    }\n    write_context_code_old(hasError, difficulty, smt, errorType, correctStateAmount) {\n        let amountCorrectStates = 0;\n        if (correctStateAmount == 0) {\n            amountCorrectStates = this.getRandomIntBetween(0, 2);\n        }\n        else if (correctStateAmount == 1) {\n            amountCorrectStates = this.getRandomIntBetween(3, 5);\n        }\n        else {\n            amountCorrectStates = this.getRandomIntBetween(6, 8);\n        }\n        //const amountStates = this.getRandomIntBetween(3,9);\n        const amountActions = this.getRandomIntBetween(3, 6);\n        //const stateNames = this.getRandomStateName(amountStates);\n        const stateNames = this.getRandomStateName(amountCorrectStates);\n        const actionNames = this.getRandomActionName(amountActions, stateNames);\n        const initialStateValues = [];\n        for (const stateName of stateNames) {\n            let randomValue = this.getRandomInt(10);\n            initialStateValues.push(randomValue);\n        }\n        // Pick 1 random target state to observe\n        const targetState = stateNames[this.getRandomInt(stateNames.length)];\n        // actionNames: string[], stateNames: string[], actionTypes: string[][], difficulty: number, targetState: string, smt: string\n        const actions = this.get_actions_from_types_with_difficulty(actionNames, stateNames, this.get_context_action_types(), difficulty, targetState, smt); //Generate with Error\n        // Fehlerfall 1:\n        const adjustedStateNames1 = hasError\n            ? this.removeRandomElements(stateNames, Math.floor(Math.random() * ((stateNames.length / 2) + 1)) + 1)\n            : stateNames;\n        const statesAndActions = [\n            ...adjustedStateNames1.map(stateName => `   ${stateName}: number,`),\n            ...actionNames.map(actionName => `   ${actionName}: () => void,`)\n        ];\n        // Shuffle the units\n        for (let i = statesAndActions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [statesAndActions[i], statesAndActions[j]] = [statesAndActions[j], statesAndActions[i]];\n        }\n        //mix in TestProvider definition:\n        // Step 1: Combine states and actions as separate blocks\n        const entries = [];\n        // Fehlerfall 2:\n        const adjustedStateNames2 = hasError\n            ? this.removeRandomElements(stateNames, Math.floor(Math.random() * ((stateNames.length / 2) + 1)) + 1)\n            : stateNames;\n        for (let i = 0; i < adjustedStateNames2.length; i++) {\n            entries.push(`   const [${adjustedStateNames2[i]}, set${adjustedStateNames2[i].toUpperCase()}] = useState<number>(${initialStateValues[i]});`);\n        }\n        for (const action of actions) {\n            entries.push(action); // `action` is a string[] (multi-line block)\n        }\n        // Step 2: Shuffle the combined entries\n        const shuffledEntries = this.shuffleArray(entries);\n        // Step 3: Flatten into a string[]\n        const mixedStateAndActions = shuffledEntries.flat();\n        //mix names:\n        // Fehlerfall 3:\n        const adjustedStateNames3 = hasError\n            ? this.removeRandomElements(stateNames, Math.floor(Math.random() * ((stateNames.length / 2) + 1)) + 1)\n            : stateNames;\n        const statesAndActionNames = [\n            ...adjustedStateNames3,\n            ...actionNames\n        ];\n        for (let i = statesAndActionNames.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [statesAndActionNames[i], statesAndActionNames[j]] = [statesAndActionNames[j], statesAndActionNames[i]];\n        }\n        const lines = [\n            //\"import { createContext, useState } from 'react';\",\n            //\"\",\n            \"interface testType {\",\n            ...statesAndActions,\n            \"}\",\n            \"\",\n            \"const TestContext = createContext(testType);\",\n            \"\",\n            \"export const TestProvider = ({children}) => {\",\n            ...mixedStateAndActions,\n            \"\",\n            \"   return (\",\n            //`       &lt;TestContext.Provider value={{ ${stateNames.join(', ')}, ${actionNames.join(', ')} }}&gt;`,\n            `       &lt;TestContext.Provider value={{ ${statesAndActionNames.join(', ')} }}&gt;`,\n            \"           {children}\",\n            \"       &lt;/TestContext.Provider&gt;\",\n            \"   )\",\n            \"}\",\n            \"\",\n            \"export default TestContext;\",\n        ];\n        this.writeln(\"<div class='block'>\");\n        // Formatting and writing output\n        lines.forEach(line => {\n            line = line.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/ /g, \"&nbsp;\");\n            this.writeln(line);\n        });\n        this.writeln(\"</div>\");\n        const set1 = new Set(adjustedStateNames1);\n        const set2 = new Set(adjustedStateNames2);\n        const set3 = new Set(adjustedStateNames3);\n        let equalCount = 0;\n        console.log(\"set1: \", adjustedStateNames1, \"set2: \", adjustedStateNames2, \"set3: \", adjustedStateNames3);\n        for (const item of set1) {\n            if (set2.has(item) && set3.has(item)) {\n                equalCount++;\n            }\n        }\n        return String(equalCount);\n        //return String(stateNames.length);\n    }\n}\nexport class Code_Generation_Task {\n    constructor(hasError, stateManagementTool, correctStateGroup) {\n        this.hasError = hasError;\n        this.stateManagementTool = stateManagementTool;\n        console.log(parseInt(correctStateGroup));\n        this.correctStateGroup = parseInt(correctStateGroup);\n    }\n    error_position() {\n        return this.hasError ? 3 : 0;\n    }\n    generate_code() {\n        let writer = new Simple_Code_Writer([]);\n        //console.log(this.stateManagementTool);\n        //this.answer = writer.write_context_code();\n        this.difficulty = 1;\n        this.errorType = 1;\n        console.log(\"HAS ERROR: \", this.hasError);\n        //TEST\n        /*\n        this.correctStateGroup = 1;\n        if (this.stateManagementTool.endsWith(\"_Error\")) {\n            this.stateManagementTool = \"Redux_Error\";\n        } else {\n            this.stateManagementTool = \"Redux\";\n        }\n        */\n        console.log(\"this.stateManagementTool: \", this.stateManagementTool);\n        //this.stateManagementTool = \"Context\";\n        if (this.stateManagementTool == \"Redux\") {\n            this.answer = writer.write_redux_code(false, this.difficulty, this.stateManagementTool, this.errorType, this.correctStateGroup);\n        }\n        else if (this.stateManagementTool == \"Jotai\") {\n            this.answer = writer.write_jotai_code(false, this.difficulty, this.stateManagementTool, this.errorType, this.correctStateGroup);\n        }\n        else if (this.stateManagementTool == \"Zustand\") {\n            this.answer = writer.write_zustand_code(false, this.difficulty, this.stateManagementTool, this.errorType, this.correctStateGroup);\n        }\n        else if (this.stateManagementTool == \"Context\") {\n            this.answer = writer.write_context_code(false, this.difficulty, this.stateManagementTool, this.errorType, this.correctStateGroup);\n        }\n        else if (this.stateManagementTool == \"Redux_Error\") {\n            this.answer = writer.write_redux_code(true, this.difficulty, this.stateManagementTool, this.errorType, this.correctStateGroup);\n        }\n        else if (this.stateManagementTool == \"Zustand_Error\") {\n            this.answer = writer.write_zustand_code(true, this.difficulty, this.stateManagementTool, this.errorType, this.correctStateGroup);\n        }\n        else if (this.stateManagementTool == \"Context_Error\") {\n            this.answer = writer.write_context_code(true, this.difficulty, this.stateManagementTool, this.errorType, this.correctStateGroup);\n        }\n        else {\n            console.log(\"No this.stateManagementTool: \", this.stateManagementTool);\n        }\n        console.log(\"stateManagementTool is: \", this.stateManagementTool);\n        console.log(\"answer is: \", this.answer);\n        return writer.arr.join(\"\");\n    }\n    response_text() {\n        let ret = \"\";\n        //ret = ret + \"The correct response is: \" + this.hasError + \"\\n\\n\";\n        ret = ret + \"The correct response is: \" + this.answer + \"\\n\\n\";\n        return ret;\n    }\n    debug_help(t) {\n        if (t.task_number_in_execution == 5) {\n            console.log(\"in here\");\n        }\n        //console.log(this.error_position());\n        console.log(this.hasError);\n        //this.error_position();\n    }\n}\nexport function get_tasks_explanation(smt) {\n    const cleaned_smt = String(smt).replace(/_Error$/, \"\");\n    switch (cleaned_smt) {\n        case \"Context\":\n            return \"<strong>Context</strong> is a built-in feature of React that allows you to share state across components without passing props manually.<br><br>\" +\n                \"In this experiment, check if each state is:<br>\" +\n                \"1. Declared in the interface, <span style='display:inline-block; width:12px; height:12px; background:darkblue; margin-left:5px;'></span><br>\" +\n                \"2. created with <code>useState()</code>, and <span style='display:inline-block; width:12px; height:12px; background:darkgreen; margin-left:5px;'></span><br>\" +\n                \"3. Passed into the <code>value</code> of the context provider. <span style='display:inline-block; width:12px; height:12px; background:aqua; margin-left:5px;'></span><br><br>\" +\n                \"Ignore any functions inside the <code>interface</code> as they are not states. The code does not have to work.\" +\n                \"<table style='border: 1px solid black;'>\" +\n                \"<tr><td style='border: 3px solid darkblue; padding: 5px;'><code>\" +\n                \"interface testType {<br>&nbsp;&nbsp;a: number,<br>&nbsp;&nbsp;b: () => void,<br>&nbsp;&nbsp;c: number,<br>}</code></td></tr>\" +\n                \"<tr><td style='border: 3px solid darkgreen; padding: 5px;'><code>\" +\n                \"export const TestProvider = ({children}) => {<br>&nbsp;&nbsp;const [a, setA] = useState<number>(0);<br>&nbsp;&nbsp;const b = () => {<br>&nbsp;&nbsp;&nbsp;&nbsp;setD(10);<br>&nbsp;&nbsp;};<br>}</code></td></tr>\" +\n                \"<tr><td style='border: 3px solid aqua; padding: 5px;'><code>\" +\n                \"&nbsp;&nbsp;return (<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TestContext.Provider value={{ a, b, c, d }}&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{children}\" +\n                \"&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TestContext.Provider&gt;<br>&nbsp;&nbsp;)</code></td></tr>\" +\n                \"</table>\" +\n                //\"<br> In this case <strong>'a'</strong> is a state that meets all three criteria and can be counted, while <strong>'c'</strong> is only declared in the <code>interface</code> and passed in the value of the <code>provider</code> but not fulfilling the other conditions, therefore it should <strong>NOT</strong> be counted!\" +\n                //\"<br> Contrary to <strong>'c'</strong>, <strong>'b'</strong> also is declared, created and passed in the value of the provider, but it is a function and not a state, therefore it is not to be counted as well.<br><br>\" +\n                \"<br> <strong>'a'</strong> can be counted!\" +\n                \"<br> <strong>'b'</strong> can be <strong>NOT</strong> counted, since it is function and not a state!\" +\n                \"<br> <strong>'c'</strong> can be <strong>NOT</strong> counted, since it does not fulfill condition 2!\" +\n                \"<br> <strong>'d'</strong> can be <strong>NOT</strong> counted, since it does not fulfill condition 1 and 2!\" +\n                \"<br><br><strong>Only count states that meet all three criteria and ignore any functions as they are not states.</strong>\";\n        case \"Zustand\":\n            return \"In <strong>Zustand</strong>, you define a store using the <code>create()</code> function. The store allows global state management and includes:<br>\" +\n                \"<ul><li>Simple key-value pairs for state</li><li>Functions (methods) to modify the state</li></ul>\" +\n                \"In this experiment, count every state that is:<br>\" +\n                \"1. Declared in the <code>type</code>, and <span style='display:inline-block; width:12px; height:12px; background:darkblue; margin-left:5px;'></span><br>\" +\n                \"2. Implemented correctly inside the store function. <span style='display:inline-block; width:12px; height:12px; background:darkgreen; margin-left:5px;'></span><br>\" +\n                \"Some states may be declared but never initialized, or used without being typed. These should not be counted.<br><br>\" +\n                \"Ignore any functions inside the store as they are not states.<br><br>\" +\n                \"<table style='border: 1px solid black;'>\" +\n                \"<tr><td style='border: 3px solid darkblue; padding: 5px;'><code>\" +\n                \"type testState = {<br>&nbsp;&nbsp;a: number,<br>&nbsp;&nbsp;b: () => void,<br>&nbsp;&nbsp;c: number,<br>}</code></td></tr>\" +\n                \"<tr><td style='border: 3px solid darkgreen; padding: 5px;'><code>\" +\n                \"export const useTestState = create<testState>()((set) => ({<br>\" +\n                \"&nbsp;&nbsp;a: 0,<br>&nbsp;&nbsp;b: () => {<br>&nbsp;&nbsp;&nbsp;&nbsp;set((state) => ({ a: 10 }))<br>&nbsp;&nbsp;}<br>}))</code></td></tr>\" +\n                \"</table>\" +\n                //\"<br> In this case <strong>'a'</strong> is a state that meets both criteria and can be counted, while <strong>'c'</strong> is only declared in the <code>type</code> but not fulfilling the other condition, therefore it should <strong>NOT</strong> be counted!\" +\n                //\"<br> Contrary to <strong>'c'</strong>, <strong>'b'</strong> also is declared in the <code>type</code>, but it is a function and not a state, therefore it is not to be counted as well.<br><br>\" +\n                \"<br> <strong>'a'</strong> can be counted!\" +\n                \"<br> <strong>'b'</strong> can be <strong>NOT</strong> counted, since it is function and not a state!\" +\n                \"<br> <strong>'c'</strong> can be <strong>NOT</strong> counted, since it does not fulfill condition 2!\" +\n                \"<br><br><strong>Only count states that meet both criteria and ignore any functions/actions as they are not states.</strong>\";\n        case \"Redux\":\n            /*            return \"In <strong>Redux</strong>, state is stored in a central object called the <code>initialState</code> and updated using <code>reducers</code> and the <code>actions</code> defined in it.<br><br>\" +\n                            \"To count a valid state in this experiment, it must:<br>\" +\n                            \"1. Be listed in the <code>interface</code> definition, and <span style='display:inline-block; width:12px; height:12px; background:darkblue; margin-left:5px;'></span><br>\" +\n                            \"2. Be present in the <code>initialState</code> <span style='display:inline-block; width:12px; height:12px; background:darkgreen; margin-left:5px;'></span><br><br>\" +\n                            \"The actions inside the <code>reducers</code> can be ignored for this experiment.<br><br>\" +\n                            \"<table style='border: 1px solid black;'>\" +\n                            \"<tr><td style='border: 3px solid darkblue; padding: 5px;'><code>\" +\n                            \"interface testState {<br>&nbsp;&nbsp;a: number,<br>&nbsp;&nbsp;b: number,<br>}</code></td></tr>\" +\n                            \"<tr><td style='border: 3px solid darkgreen; padding: 5px;'><code>\" +\n                            \"const initialState: testState = {<br>&nbsp;&nbsp;a: 0<br>}</code></td></tr>\" +\n                            \"<tr><td style='border: 3px solid darkred; padding: 5px;'><code>\" +\n                            \"export const testSlice = createSlice({<br>&nbsp;&nbsp;name: 'testState',<br>&nbsp;&nbsp;initialState,<br>&nbsp;&nbsp;reducers: { ... }<br>});</code></td></tr>\" +\n                            \"</table>\" +\n                            \"<br> In this case <strong>'a'</strong> is a state that meets both criteria and can be counted, while <strong>'b'</strong> is only declared in the <code>interface</code> but not initialized, so it should <strong>NOT</strong> be counted!<br><br>\" +\n                            \"<strong>Only count states that meet both criteria and ignore any functions/actions as they are not states.</strong>\";\n            */\n            return \"In <strong>Redux</strong>, state is stored in a central object called the <code>initialState</code> and updated using <code>reducers</code> and the <code>actions</code> defined in it.<br><br>\" +\n                \"To count a valid state in this experiment, it must:<br>\" +\n                \"1. Be listed in the <code>interface</code> definition, and <span style='display:inline-block; width:12px; height:12px; background:darkblue; margin-left:5px;'></span><br>\" +\n                \"2. Be present in the <code>initialState</code> <span style='display:inline-block; width:12px; height:12px; background:darkgreen; margin-left:5px;'></span><br>\" +\n                \"Some states may be declared but never initialized, or used without being typed. These should not be counted.<br><br>\" +\n                \"The <code>code</code> inside the <span style='display:inline-block; width:12px; height:12px; background:darkred; margin-left:5px;'></span> box can be ignored for this experiment.<br><br>\" +\n                \"<table style='border: 1px solid black;'>\" +\n                \"<tr><td style='border: 3px solid darkblue; padding: 5px;'><code>\" +\n                \"interface testState {<br>\" +\n                \"&nbsp;&nbsp;a: number,<br>\" +\n                \"&nbsp;&nbsp;b: number,<br>\" +\n                \"}</td></tr>\" +\n                \"<tr><td style='border: 3px solid darkgreen; padding: 5px;'><code>\" +\n                \"const initialState: testState = {<br>\" +\n                \"&nbsp;&nbsp;a: 0<br>\" +\n                \"}</td></tr>\" +\n                \"<tr><td style='border: 3px solid darkred; padding: 5px;'><code>\" +\n                \"export const testSlice = createSlice({<br>\" +\n                \"&nbsp;&nbsp;name: 'testState',<br>\" +\n                \"&nbsp;&nbsp;initialState,<br>\" +\n                \"&nbsp;&nbsp;reducers: {<br>\" +\n                //\"&nbsp;&nbsp;&nbsp;&nbsp;...<br>\" +\n                \"&nbsp;&nbsp;&nbsp;&nbsp;z: (state) => {<br>\" +\n                \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.a = 1;<br>\" +\n                \"&nbsp;&nbsp;&nbsp;&nbsp;},<br>\" +\n                \"&nbsp;&nbsp;&nbsp;&nbsp;...<br>\" +\n                \"&nbsp;&nbsp;},<br>\" +\n                \"});<br>\" +\n                \"export const { a, b, z } = testSlice.actions;<br>\" +\n                \"export default testSlice.reducer<br>\" +\n                \"<br>\" +\n                \"export const store = configureStore({\\n<br>\" +\n                \"&nbsp;&nbsp;reducer: {<br>\" +\n                \"&nbsp;&nbsp;&nbsp;&nbsp;testSlice: testSlice.reducer<br>\" +\n                \"&nbsp;&nbsp;},<br>\" +\n                \"})<br>\" +\n                \"<br>\" +\n                \"export type RootState = ReturnType&lt;typeof store.getState&gt;<br>\" +\n                \"export type AppDispatch = typeof store.dispatch;<br>\" +\n                \"<br>\" +\n                \"export const useAppDispatch = useDispatch.withTypes&lt;AppDispatch&gt;();<br>\" +\n                \"export const useAppSelector = useSelector.withTypes&lt;RootState&gt;();<br>\" +\n                \"</td></tr>\" +\n                \"</table></code>\" +\n                //\"<br> In this case <strong>'a'</strong> is a state that meets both criteria and can be counted, while <strong>'b'</strong> is only declared in the <code>interface</code> but not fulfilling the other condition, therefore it should <strong>NOT</strong> be counted!<br><br>\" +\n                \"<br> <strong>'a'</strong> can be counted!\" +\n                \"<br> <strong>'b'</strong> can be <strong>NOT</strong> counted, since it is only declared in the interface!\" +\n                \"<br><br><strong>Only count states that meet both criteria and ignore any functions/actions.</strong>\";\n        case \"Jotai\":\n            return \"<strong>Jotai</strong> is a state management library for React that uses <em>atoms</em> as basic units of state.<br><br>\" +\n                \"Each atom is a standalone piece of state created using <code>atom()</code>.<br><br>\" +\n                \"Jotai does not use context, reducers, or slices — just simple atoms.<br><br>\" +\n                \"In this experiment, the task is to only count atoms that hold an actual value, which serve as a state.<span style='display:inline-block; width:12px; height:12px; background:green; margin-left:5px;'></span><br>\" +\n                \"Write-only atoms can be ignored.<span style='display:inline-block; width:12px; height:12px; background:darkred; margin-left:5px;'></span><br><br>\" +\n                \"<table style='border: 1px solid black;'>\" +\n                \"<tr><td style='border: 3px solid green; padding: 5px;'><code>const a = atom(0);</code></td></tr>\" +\n                \"<tr><td style='border: 3px solid darkred; padding: 5px;'><code>const b = atom(<br>&nbsp;&nbsp;null,<br>&nbsp;&nbsp;(get, set) => {<br>&nbsp;&nbsp;&nbsp;&nbsp;set(a, 10)<br>&nbsp;&nbsp;}<br>);</code></td></tr>\" +\n                \"</table>\" +\n                //\"<br> In this case <strong>'a'</strong> is an <code>atom</code> that serves as a state and can be counted!\" +\n                //\"<br> Contrary to <strong>'a'</strong>, <strong>'b'</strong> is a write-only <code>atom</code> and should therefore not be counted.<br><br>\" +\n                \"<br> <strong>'a'</strong> can be counted!\" +\n                \"<br> <strong>'b'</strong> can be <strong>NOT</strong> counted, since it is a write-only atom!\" +\n                \"<br><br><strong>Only count states that meet the criteria and ignore any write-only atoms.</strong>\";\n        default:\n            return \"No explanation available.\";\n    }\n}\n/*\nexport function create_tasks_grouped_by_error_position() {\n    let state_management_tools = [\"Redux\", \"Jotai\", \"Context\", \"Zustand\", \"Redux_Error\", \"Context_Error\", \"Zustand_Error\"];\n    let error_flags = [true, false];\n    let all_smt_combinations: any[];\n\n    all_smt_combinations = all_different_x_tupel(1, state_management_tools);\n    //let ret = {1:[], 0:[]};\n    let ret: Record<string, Code_Generation_Task[]> = {\n        \"true\": [],\n        \"false\": []\n    };\n    all_array_combinations([all_smt_combinations, error_flags],\n        (combo) => {\n            let task = new Code_Generation_Task(combo[1], combo[0]);\n            ret[\"\" + task.hasError].push(task);\n    });\n    console.log(ret);\n    return ret;\n}\n\n\n\nexport function create_tasks_grouped_by_tool() {\n    let state_management_tools = [\"Redux\", \"Jotai\", \"Context\", \"Zustand\", \"Redux_Error\", \"Context_Error\", \"Zustand_Error\"];\n    let amts = [\"1\", \"2\", \"3\"];\n\n    let all_smt_combinations: any[] = all_different_x_tupel(1, state_management_tools);\n    let all_amt_combinations: any[] = all_different_x_tupel(1, amts);\n    let tasks: Code_Generation_Task[] = [];\n\n    all_smt_combinations.forEach((combo) => {\n        all_amt_combinations.forEach((amt) => {\n            let task = new Code_Generation_Task(false , combo, amt); // Only pass the tool and hasError as false (to not touch the code)\n            tasks.push(task);\n        });\n    });\n\n    console.log(tasks);\n    return tasks;\n}\n */\n//# sourceMappingURL=Feature_count_states_2.js.map","import { contains } from \"../utils/Utils.js\";\nexport function init() { }\nexport class Automata {\n    constructor(config) {\n        this.current_state = -1;\n        this.transitions = [];\n        this.states = [];\n        this.start_state = config.start;\n        this.states = config.states;\n        for (let i = 0; i < this.states.length; i++) {\n            this.transitions.push([]);\n        }\n        for (let t of config.transitions) {\n            if (this.transitions == null) {\n                console.log(\"Something is wrong here\");\n            }\n            if (this.transitions == undefined || t.from == undefined) {\n                console.log(\"Something is wrong here\");\n            }\n            if (this.transitions[t.from] == undefined) {\n                console.log(\"Something is wrong here\");\n            }\n            try {\n                this.transitions[t.from].push(t);\n            }\n            catch (e) {\n                console.log(\"weird\");\n            }\n        }\n        this.init_function = config.init_function;\n        this.end_states = config.end_states;\n    }\n    // on_finish_function: (number) => void;\n    input(input) {\n        let matching_transition = this.first_match(input);\n        let state_before = this.current_state;\n        if (matching_transition != null) {\n            this.current_state = matching_transition.next_state; // go to next state\n            matching_transition.action(state_before, input, this.current_state); // go to next state\n        }\n    }\n    start() {\n        this.current_state = this.start_state;\n    }\n    first_match(input) {\n        for (let i = 0; i < this.transitions[this.current_state].length; i++) {\n            if (this.transitions[this.current_state][i].accepts(input))\n                return this.transitions[this.current_state][i];\n        }\n        return null;\n    }\n    initialize() {\n        this.current_state = this.start_state;\n        this.init_function();\n    }\n    add_finish_action(action) {\n        for (let transitions of this.transitions) {\n            for (let transition of transitions) {\n                if (this.is_transition_to_end(transition)) {\n                    let former_action = transition.action;\n                    transition.action = (from, input, next) => {\n                        former_action(from, input, next);\n                        action();\n                    };\n                }\n            }\n        }\n    }\n    is_transition_to_end(transition) {\n        return contains(this.end_states, transition.next_state);\n    }\n    add_action_to_transitions(is_target_transition, action) {\n        for (let transitions of this.transitions) {\n            for (let transition of transitions) {\n                if (is_target_transition(transition)) {\n                    let former_action = transition.action;\n                    transition.action = (from, input, next) => {\n                        former_action(from, input, next);\n                        action();\n                    };\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=Automata.js.map","import { Automata } from \"./Automata.js\";\nexport function init() { }\nexport class Automata_Configurator {\n    constructor(states, start, init_function, transitions, end_states) {\n        this.states = states;\n        this.start = start;\n        this.init_function = init_function;\n        this.transitions = transitions;\n        this.end_states = end_states;\n    }\n}\nexport function create_automata(states, start, init_function, transitions, end_states) {\n    return new Automata(new Automata_Configurator(states, start, init_function, transitions, end_states));\n}\n//# sourceMappingURL=Automata_Configurator.js.map","export class Automata_Forwarder {\n    constructor(forwarder_name) {\n        this.set_active_function = () => { };\n        this.forwarder_name = forwarder_name;\n    }\n    input(s) {\n        this.automata.input(s);\n    }\n    add_activation_function(to_add) {\n        // let old_activation_function = this.set_active_function;\n        // this.set_active_function = () => {\n        //     old_activation_function();\n        //     to_add();\n        // }\n    }\n    set_active() { }\n}\n//# sourceMappingURL=Automata_Forwarder.js.map","import { contains } from \"../utils/Utils.js\";\nexport function init() { }\nclass Transition_Acceptor {\n}\nclass Transition_Strings_Acceptor extends Transition_Acceptor {\n    constructor(strings) {\n        super();\n        this.accepted_strings = strings;\n    }\n    accepts(input) {\n        return contains(this.accepted_strings, input);\n    }\n}\nexport class Transition_Acceptor_Function extends Transition_Acceptor {\n    constructor(acceptor_function) {\n        super();\n        this.acceptor_function = acceptor_function;\n    }\n    accepts(input) {\n        return this.acceptor_function(input);\n    }\n}\nclass Transition_Strings_Accepts_ALL extends Transition_Acceptor {\n    accepts(input) {\n        return true;\n    }\n}\nexport function keys(strings) {\n    return new Transition_Strings_Acceptor(strings);\n}\nexport function if_func(f) {\n    return new Transition_Acceptor_Function(f);\n}\nexport function each_char(charlist) {\n    var chars = [];\n    for (let a of charlist) {\n        chars.push(a);\n    }\n    return new Transition_Strings_Acceptor(chars);\n}\nexport class Transition {\n    constructor(from, acceptor, next_state, action) {\n        this.from = from;\n        this.acceptor = acceptor;\n        this.next_state = next_state;\n        this.action = action;\n    }\n    ;\n    is_valid_input(input) {\n        return this.acceptor.accepts(input);\n    }\n    accepts(input) {\n        return this.acceptor.accepts(input);\n    }\n}\nexport function Simple_Transition(from, accept_input_function, next_state, action) {\n    return new Transition(from, new Transition_Acceptor_Function(accept_input_function), next_state, (s, i, n) => action(i));\n}\nexport function accept_all() {\n    return new Transition_Strings_Accepts_ALL();\n}\nexport function do_nothing(at, input, next) { }\nexport function pass(f) {\n    return (at, input, next) => f();\n}\nexport function from(from) {\n    return {\n        to: (to) => {\n            return {\n                on: (key) => {\n                    return {\n                        if: (check) => {\n                            return {\n                                do: (action) => {\n                                    return Simple_Transition(from, (input) => { return input == key && check(input); }, to, action);\n                                }\n                            };\n                        },\n                        do: (action) => {\n                            return Simple_Transition(from, (input) => { return input == key; }, to, action);\n                        }\n                    };\n                },\n                on_any: (keys) => {\n                    return {\n                        if: (check) => {\n                            return {\n                                do: (action) => {\n                                    return Simple_Transition(from, (input) => {\n                                        return contains(keys, input) && check(input);\n                                    }, to, action);\n                                }\n                            };\n                        },\n                        do: (action) => {\n                            return Simple_Transition(from, (input) => { return contains(keys, input); }, to, action);\n                        }\n                    };\n                }\n            };\n        },\n    };\n}\n//# sourceMappingURL=Transitions.js.map","import { Automata_Forwarder } from \"../Automata/Automata_Forwarder.js\";\nimport { Automata } from \"../Automata/Automata.js\";\nexport function init() { }\n/*\n    I don't do anything - I am just a superclass\n */\nexport class Automata_With_Output_Forwarder extends Automata_Forwarder {\n    constructor(forwarder_name, measurement, pre_run_instructions, post_run_instructions) {\n        super(forwarder_name);\n        this.pre_run_instructions = pre_run_instructions;\n        this.post_run_instructions = post_run_instructions;\n        this.measurement = measurement;\n        this.automata = this.create_automata(); //new Automata(this.automata_configurator());\n        this.automata.initialize();\n    }\n    set_active() {\n        this.show_intro();\n    }\n    create_automata() {\n        return new Automata(this.automata_configurator());\n    }\n    output_writer() {\n        return this.measurement.output_writer();\n    }\n    show_intro() {\n        this.output_writer().clear_all();\n        this.output_writer().print_string_to_state(this.forwarder_name);\n        this.pre_run_instructions();\n    }\n    empty_screen_and_show_instructions(command) {\n        this.output_writer().clear_state();\n        this.output_writer().clear_stage();\n        if (command == null || command == undefined)\n            console.log(\"something is strange\");\n        else\n            command();\n    }\n}\n//# sourceMappingURL=Automata_With_Output_Forwarder.js.map","import { from } from \"../Automata/Transitions.js\";\nimport { Automata_Configurator } from \"../Automata/Automata_Configurator.js\";\nimport { Automata_With_Output_Forwarder } from \"./Automata_With_Output_Forwarder.js\";\nexport function init() { }\nlet SHOW_PAGE = 0;\nlet FINISHED_BOOK = 1;\nlet EVERYTHING_DONE = 1;\nexport class Book_Forwarder extends Automata_With_Output_Forwarder {\n    constructor(book_name, text, measurement) {\n        super(book_name, measurement, text[0], text[text.length - 1]);\n        this.current_page_number = -1;\n        this.pages = text;\n        this.create_automata();\n    }\n    set_page_index(index) {\n        this.current_page_number = index;\n        this.empty_screen_and_show_instructions(this.pages[this.current_page_number]);\n        this.output_writer().print_string_to_state(this.forwarder_name);\n        this.output_writer().print_string_to_page_number(\"Page \" + (this.current_page_number + 1) + \" / \" + this.pages.length);\n        let navigation_string = \"<hr>\";\n        if (index > 0)\n            navigation_string += \"[&#8592] = previous page\";\n        if (index < this.pages.length - 1)\n            navigation_string += (navigation_string != \"<hr>\" ? \"<br>\" : \"\") + \"[&#8594] = next page\";\n        if (index == this.pages.length - 1)\n            navigation_string += (navigation_string != \"<hr>\" ? \"<br>\" : \"\") + \"[Enter] = Finish\";\n        this.output_writer().print_html_on_stage(navigation_string);\n    }\n    set_active() {\n        super.set_active();\n    }\n    show_intro() {\n        this.set_page_index(0);\n    }\n    show_outro() { }\n    automata_configurator() {\n        return new Automata_Configurator([SHOW_PAGE, EVERYTHING_DONE], SHOW_PAGE, () => { }, this.transitions(), [EVERYTHING_DONE]);\n    }\n    transitions() {\n        return [\n            from(SHOW_PAGE).to(SHOW_PAGE)\n                .on(\"ArrowRight\")\n                .if((i) => this.current_page_number < this.pages.length - 1)\n                .do((i) => {\n                this.set_page_index(++this.current_page_number);\n            }),\n            from(SHOW_PAGE).to(SHOW_PAGE)\n                .on(\"ArrowLeft\")\n                .if((i) => this.current_page_number > 0)\n                .do((i) => {\n                this.set_page_index(--this.current_page_number);\n            }),\n            from(SHOW_PAGE).to(EVERYTHING_DONE)\n                .on(\"Enter\")\n                .if((i) => this.current_page_number >= this.pages.length - 1)\n                .do((i) => { })\n        ];\n    }\n}\n//# sourceMappingURL=Book_Forwarder.js.map","import { Experimentation_Forwarder } from \"./Experimentation_Forwarder.js\";\nexport class Experiment_Forwarder extends Experimentation_Forwarder {\n    constructor(pre_run_instructions, experiment_definition, measurement) {\n        super(\"Main Experiment\", () => {\n            pre_run_instructions();\n            measurement.output_writer().print_html_on_stage(\"<hr>\" +\n                \"Press [Enter] to start the experiment.\");\n        }, () => {\n            measurement.output_writer().print_html_on_stage(\"You finished the experiment phase.<hr>\" +\n                \"Please, press [Enter] to go to the next phase.<br>\");\n        }, experiment_definition, measurement);\n    }\n}\n//# sourceMappingURL=Experiment_Forwarder.js.map","import { Automata_Configurator } from \"../Automata/Automata_Configurator.js\";\nimport { from } from \"../Automata/Transitions.js\";\nimport { Automata_With_Output_Forwarder } from \"./Automata_With_Output_Forwarder.js\";\nlet SHOW_INTRO = 0;\nlet SHOW_PRE_TASK_INFO = 1;\nlet SHOW_TASK = 2;\nlet SHOW_PENALTY = 3;\nlet TASK_FINISHED = 4;\nlet SHOW_OUTRO = 5;\nlet EVERYTHING_DONE = 6;\nexport class Experimentation_Forwarder extends Automata_With_Output_Forwarder {\n    show_intro() {\n        this.empty_screen_and_show_instructions(this.pre_run_instructions);\n        this.output_writer().print_experiment_name(this.forwarder_name);\n    }\n    show_outro() {\n        this.empty_screen_and_show_instructions(this.post_run_instructions);\n    }\n    automata_configurator() {\n        return new Automata_Configurator([SHOW_INTRO, SHOW_PRE_TASK_INFO, SHOW_TASK, TASK_FINISHED, SHOW_OUTRO, EVERYTHING_DONE], SHOW_INTRO, () => { }, this.transitions(), [EVERYTHING_DONE]);\n    }\n    current_task() {\n        return this.experiment_definition.tasks[this.current_page_index];\n    }\n    ;\n    constructor(experiment_automata_name, pre_run_instructions, post_run_instructions, experiment_definition, measurement) {\n        super(experiment_automata_name, measurement, pre_run_instructions, post_run_instructions);\n        this.current_page_index = -1;\n        this.experiment_definition = experiment_definition;\n    }\n    automata_configuration() {\n        return new Automata_Configurator([SHOW_INTRO, SHOW_PRE_TASK_INFO, SHOW_TASK, TASK_FINISHED, SHOW_OUTRO, EVERYTHING_DONE], SHOW_INTRO, () => { }, this.transitions(), [EVERYTHING_DONE]);\n    }\n    transitions() {\n        return [\n            from(SHOW_INTRO).to(SHOW_TASK)\n                .on(\"Enter\")\n                .if((i) => !this.first_task().has_pre_task_description)\n                .do((i) => {\n                this.set_experiment_index(0);\n                this.measurement.start_measurement(this.current_task());\n            }),\n            from(SHOW_INTRO).to(SHOW_PRE_TASK_INFO)\n                .on(\"Enter\")\n                .if((i) => this.first_task().has_pre_task_description)\n                .do((i) => {\n                this.set_experiment_index(0);\n                this.show_pre_task_info();\n            }),\n            from(SHOW_INTRO).to(SHOW_OUTRO) // State=3: Experiment done - just the message afterwards shown\n                .on(\"Delete\")\n                .do((i) => {\n                this.show_outro();\n            }),\n            from(SHOW_PRE_TASK_INFO).to(SHOW_TASK)\n                .on(\"Enter\")\n                .do((i) => {\n                this.measurement.start_measurement(this.current_task());\n            }),\n            // Task Shown - Incorrect input => Remain in Task\n            from(SHOW_TASK).to(SHOW_TASK)\n                .on_any(this.measurement.accepted_responses())\n                .if((i) => !this.current_task().accepts_answer(i) && !this.measurement.demands_penalty())\n                .do((i) => {\n                this.measurement.incorrect_response(i, this.current_task());\n            }),\n            from(SHOW_TASK).to(SHOW_OUTRO)\n                .on(\"?+Control\")\n                .if((i) => true)\n                .do((i) => {\n                this.measurement.stop_measurement(i, this.current_task());\n                this.show_outro();\n            }),\n            // STATE 1=Task is shown, 2=Input correct\n            from(SHOW_TASK).to(TASK_FINISHED)\n                .on_any(this.measurement.accepted_responses())\n                .if((i) => this.current_task().accepts_answer(i) &&\n                this.current_page_index < this.experiment_definition.tasks.length - 1)\n                .do((i) => {\n                this.measurement.stop_measurement(i, this.current_task());\n            }),\n            from(SHOW_TASK).to(SHOW_PENALTY)\n                .on_any(this.measurement.accepted_responses())\n                .if((i) => !this.current_task().accepts_answer(i) && this.measurement.demands_penalty())\n                .do((i) => {\n                this.measurement.incorrect_response(i, this.current_task());\n            }),\n            from(SHOW_PENALTY).to(SHOW_TASK)\n                .on(\"Enter\")\n                .if((i) => this.measurement.penalty_is_over())\n                .do((i) => {\n                this.measurement.start_measurement(this.current_task());\n            }),\n            // Between Tasks to next task\n            from(TASK_FINISHED).to(SHOW_PRE_TASK_INFO)\n                .on(\"Enter\")\n                .if((i) => this.current_page_index < this.experiment_definition.tasks.length - 1 && this.next_task().has_pre_task_description)\n                .do((i) => {\n                this.inc_current_experiment();\n                this.show_pre_task_info();\n            }),\n            from(TASK_FINISHED).to(SHOW_TASK)\n                .on(\"Enter\")\n                .if((i) => this.current_page_index < this.experiment_definition.tasks.length - 1 && !this.next_task().has_pre_task_description)\n                .do((i) => {\n                this.inc_current_experiment();\n                this.measurement.start_measurement(this.current_task());\n            }),\n            from(SHOW_TASK).to(SHOW_OUTRO) // State=3: Experiment done - just the message afterwards shown\n                .on_any(this.measurement.accepted_responses())\n                .if((i) => this.current_task().accepts_answer(i) &&\n                this.current_page_index == this.experiment_definition.tasks.length - 1)\n                .do((i) => {\n                this.measurement.stop_measurement(i, this.current_task());\n                this.show_outro();\n            }),\n            from(SHOW_OUTRO).to(EVERYTHING_DONE)\n                .on(\"Enter\")\n                .do((i) => {\n                let a = 1;\n            })\n        ];\n    }\n    set_experiment_index(index) {\n        this.current_page_index = index;\n        this.output_writer().print_string_to_page_number(\"Task \" + (this.current_page_index + 1) + \" / \" + this.experiment_definition.tasks.length);\n    }\n    inc_current_experiment() {\n        this.set_experiment_index(++this.current_page_index);\n    }\n    init_experiment() {\n        this.experiment_definition.init_experiment(false);\n    }\n    show_pre_task_info() {\n        this.output_writer().clear_stage();\n        this.output_writer().clear_error();\n        this.current_task().print_pre_task_info();\n    }\n    next_task() {\n        return this.experiment_definition.tasks[this.current_page_index + 1];\n    }\n    first_task() {\n        return this.experiment_definition.tasks[0];\n    }\n}\n//# sourceMappingURL=Experimentation_Forwarder.js.map","import { Automata_With_Output_Forwarder } from \"./Automata_With_Output_Forwarder.js\";\nimport { Automata_Configurator } from \"../Automata/Automata_Configurator.js\";\nimport { from } from \"../Automata/Transitions.js\";\nlet SHOW_INTRO = 0;\nlet SHOW_QUESTION = 1;\nlet ANSWERED_INCOMPLETE = 2;\nlet ANSWERES_COMPLETE = 3;\nlet EVERYTHING_DONE = 4;\nexport class Question {\n    constructor(variable_name, question_text) {\n        this.answer = null;\n        this.variable_name = variable_name;\n        this.question_text = question_text;\n    }\n    store_answer() {\n        let element = document.getElementById(this.variable_name);\n        // @ts-ignore\n        this.answer = element.value;\n    }\n}\nexport class Alternatives extends Question {\n    constructor(variable_name, question_text, alternatives) {\n        super(variable_name, question_text);\n        this.alternatives = alternatives;\n    }\n    input_html() {\n        let html_string = \"<select id=\\\"\" + this.variable_name + \"\\\">\";\n        html_string += \"<option disabled selected value> -- select an option -- </option>\";\n        let index = 0;\n        this.alternatives.forEach((a) => html_string += \"<option value=\" + index++ + \">\" + a + \"</option>\");\n        html_string += (\"</select>\");\n        return html_string;\n    }\n    store_answer() {\n        let element = document.getElementById(this.variable_name);\n        // @ts-ignore\n        this.answer = this.alternatives[element.value];\n    }\n}\nexport class Information extends Question {\n    html_string() {\n        let html_string = \"<p>We have one question to you.</p>\";\n        return html_string;\n    }\n    input_html() {\n        let html_string = \"<input type=\\\"text\\\" id=\\\"\" + this.variable_name + \"\\\">\";\n        return html_string;\n    }\n    constructor(question_text) {\n        super(null, question_text);\n    }\n}\nexport class Freetext extends Question {\n    html_string() {\n    }\n    input_html() {\n        let html_string = \"<input type=\\\"text\\\" id=\\\"\" + this.variable_name + \"\\\">\";\n        return html_string;\n    }\n}\nexport class Questionnaire_Forwarder extends Automata_With_Output_Forwarder {\n    constructor(questions, measurement) {\n        super(\"Questionnaire\", measurement, () => measurement.output_writer().print_html_on_stage(\"Please, answer the following questions.<br>\"), () => measurement.output_writer().print_html_on_stage(\"Thank you for answering the questions.\"));\n        this.current_question_number = -1;\n        this.questions = questions;\n    }\n    automata_configurator() {\n        return new Automata_Configurator([SHOW_INTRO, SHOW_QUESTION, ANSWERED_INCOMPLETE, ANSWERES_COMPLETE, EVERYTHING_DONE], SHOW_INTRO, () => { }, this.transitions(), [EVERYTHING_DONE]);\n    }\n    transitions() {\n        return [\n            from(SHOW_INTRO).to(EVERYTHING_DONE)\n                .on(\"DONE\")\n                .if((i) => true)\n                .do((i) => {\n                this.add_result_to_question();\n                console.log(\"dummy\");\n            }),\n        ];\n    }\n    show_intro() {\n        super.show_intro();\n        let html_string = this.create_questionnaire_html_string();\n        this.output_writer().print_html_on_stage(html_string);\n        document.getElementById(\"DONE\").onclick = () => this.input(\"DONE\");\n        ;\n    }\n    show_outro() {\n    }\n    create_questionnaire_html_string() {\n        let html_string = \"<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>\";\n        this.questions.forEach((q) => html_string += \"<tr><td>\" + q.question_text + \"</td>\" +\n            \"<td>\" + q.input_html() + \"</td></tr>\");\n        html_string += \"</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>\";\n        return html_string;\n    }\n    add_result_to_question() {\n        for (let question of this.questions) {\n            question.store_answer();\n        }\n    }\n}\n//# sourceMappingURL=Questionnaire_Forwarder.js.map","import { Automata_Configurator } from \"../Automata/Automata_Configurator.js\";\nimport { from } from \"../Automata/Transitions.js\";\nimport { Experimentation_Forwarder } from \"./Experimentation_Forwarder.js\";\nlet SHOW_INTRO = 0;\nlet SHOW_PRE_TASK_INFO = 1;\nlet SHOW_TASK = 2;\nlet SHOW_PENALTY = 3;\nlet TASK_FINISHED = 4;\nlet SHOW_OUTRO = 5;\nlet EVERYTHING_DONE = 6;\nlet ESCAPED = 7;\nexport class Training_Execution_Forwarder extends Experimentation_Forwarder {\n    constructor(pre_run_instructions, training_configuration, experiment_definition, measurement) {\n        super(\"Training\", () => {\n            pre_run_instructions();\n            measurement.output_writer().print_html_on_stage(\"<hr>\" +\n                \"Press [Enter] to start training.\");\n        }, () => {\n            measurement.output_writer().print_html_on_stage(\"You finished the training phase.<hr>\" +\n                (training_configuration.can_be_repeated ? \"Please, press [Enter] to run again a training session.<br>\" : \"\") +\n                \"Please, press [E] (capital E, i.e., [shift] + [e]) to enter the experiment phase.\");\n        }, experiment_definition, measurement);\n        this.training_configuration = training_configuration;\n    }\n    print_cancel_text() {\n        this.output_writer().clear_stage();\n        this.output_writer().print_string_to_page_number(\"Cancelled\");\n        let navigation_string = \"You cancelled this training session.<hr>\" +\n            \"Press [Enter] if you want to start another training session.<br>\" +\n            \"Press [E] (capital E!) if you want to start with the experiment.\";\n        this.output_writer().print_html_on_stage(navigation_string);\n    }\n    automata_configurator() {\n        return new Automata_Configurator([SHOW_INTRO, SHOW_PRE_TASK_INFO, SHOW_TASK, SHOW_PENALTY, TASK_FINISHED, SHOW_OUTRO, EVERYTHING_DONE, ESCAPED], SHOW_INTRO, () => { }, this.transitions(), [EVERYTHING_DONE]);\n    }\n    transitions() {\n        let experiment_transitions = super.transitions();\n        let this_transitions = [\n            from(SHOW_INTRO).to(ESCAPED)\n                .on(\"Escape\")\n                .if(() => this.training_configuration.can_be_cancelled)\n                .do((i) => {\n                this.print_cancel_text();\n            }),\n            from(SHOW_TASK).to(ESCAPED)\n                .on(\"Escape\")\n                .if(() => this.training_configuration.can_be_cancelled)\n                .do((i) => {\n                this.print_cancel_text();\n            }),\n            from(TASK_FINISHED).to(ESCAPED)\n                .on(\"Escape\")\n                .if(() => this.current_page_index < this.experiment_definition.tasks.length - 1 && this.training_configuration.can_be_cancelled)\n                .do((i) => {\n                this.print_cancel_text();\n            }),\n            from(ESCAPED).to(EVERYTHING_DONE)\n                .on(\"E\").do(() => {\n                let dummy = 1;\n            }),\n            from(ESCAPED).to(SHOW_INTRO)\n                .on(\"Enter\").do(() => {\n                this.experiment_definition.init_experiment(true);\n                this.show_intro();\n            }),\n            from(SHOW_OUTRO).to(SHOW_INTRO)\n                .on(\"Enter\")\n                .if(() => this.training_configuration.can_be_repeated)\n                .do(() => {\n                this.experiment_definition.init_experiment(true);\n                this.show_intro();\n            }),\n            from(SHOW_OUTRO).to(EVERYTHING_DONE)\n                .on(\"E\")\n                .do((i) => {\n                let dummy = 1;\n            })\n        ];\n        experiment_transitions.splice(experiment_transitions.length - 1);\n        this_transitions.forEach((e) => experiment_transitions.push(e));\n        return experiment_transitions;\n    }\n    input(s) {\n        if (![\"a\", \"b\", \"c\"].includes(s) && this.automata.current_state != 0)\n            return super.input(s);\n        super.input(s);\n    }\n    init_experiment() {\n        this.training_configuration.init_experiment(this.experiment_definition);\n    }\n}\n//# sourceMappingURL=Training_Execution_Forwarder.js.map","import { Automata_Forwarder } from \"../Automata/Automata_Forwarder.js\";\nimport { create_automata } from \"../Automata/Automata_Configurator.js\";\nimport { from } from \"../Automata/Transitions.js\";\nexport class Sequential_Forwarder_Forwarder extends Automata_Forwarder {\n    constructor(forwarders) {\n        super(\"Default Sequential Forwarder Forwader\");\n        this.current_forwarder_index = 0;\n        this.forwarders = forwarders;\n        for (let forwarder of forwarders) {\n            forwarder.automata.add_finish_action(() => this.automata.input(\"switch to next state\"));\n        }\n        this.automata = create_automata([0, 1], 0, () => { }, [\n            from(0).to(0)\n                .on(\"switch to next state\")\n                .if(() => this.current_forwarder_index < this.forwarders.length - 1)\n                .do(() => { this.current_forwarder_index++; this.current_forwarder().set_active(); }),\n            from(0).to(1)\n                .on(\"switch to next state\")\n                .if(() => this.current_forwarder_index == this.forwarders.length - 1)\n                .do(() => { })\n        ], [1]);\n        this.automata.initialize();\n        // this.set_active();\n        // console.log(\"active forward: \" + this.current_forwarder().forwarder_name);\n    }\n    input(input) {\n        this.forwarders[this.current_forwarder_index].input(input);\n    }\n    input_sequence(input_sequence) {\n        for (let s of input_sequence)\n            this.input(s);\n    }\n    current_forwarder() {\n        return this.forwarders[this.current_forwarder_index];\n    }\n    set_active() {\n        super.set_active();\n        this.current_forwarder().set_active();\n    }\n}\n//# sourceMappingURL=Sequential_Forwarder_Forwarder.js.map","import { Experiment_Output_Writer, SET_SEED } from \"./Experimentation.js\";\nimport { key_event_string, save_file_in_html } from \"../utils/Utils.js\";\nimport { create_code_experiment_execution } from \"./functions/create_code_experiment_execution.js\";\nexport class Browser_Output_Writer extends Experiment_Output_Writer {\n    print_experiment_name(s) {\n        this.get_html_element_by_id(\"STATE\").innerHTML = s;\n    }\n    clear_error() {\n        let element_id = [\n            \"STAGE_ERROR\"\n        ];\n        for (let e of element_id) {\n            let parent = document.getElementById(e);\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n    clear_stage() {\n        let element_id = [\n            \"STAGE\",\n            \"STAGE_MSG\",\n            \"STAGE_ERROR\"\n        ];\n        for (let e of element_id) {\n            let parent = document.getElementById(e);\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n    clear_state() {\n        let element_id = [\n            \"STATE\",\n            \"TASK\"\n        ];\n        for (let e of element_id) {\n            let parent = document.getElementById(e);\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n    print_error_string_on_stage(s) {\n        let e = this.get_html_element_by_id(\"STAGE_ERROR\");\n        e.innerHTML = s;\n    }\n    get_html_element_by_id(s) {\n        // @ts-ignore\n        return document.getElementById(s);\n    }\n    print_string_to_state(s) {\n        this.get_html_element_by_id(\"STATE\").innerHTML = s;\n    }\n    print_string_on_stage(s) {\n        this.print_html_on_stage(\"<p>\" + s + \"</p>\");\n    }\n    ask_for_input() {\n        // @ts-ignore\n        let p = document.createElement(\"p\");\n        let l = document.createElement(\"label\");\n        l.setAttribute('type', 'text');\n        p.textContent = \"Answer: \";\n        p.appendChild(l);\n        // @ts-ignore\n        let i = document.createElement(\"input\");\n        i.setAttribute('type', 'text');\n        i.setAttribute('class', 'input');\n        p.appendChild(i);\n        i.id = \"INPUT\";\n        this.get_html_element_by_id(\"STAGE\").appendChild(p);\n        i.focus();\n    }\n    set_focus_on_input() {\n        let i = this.get_html_element_by_id(\"INPUT\");\n        i.focus();\n    }\n    print_string_to_page_number(s) {\n        this.get_html_element_by_id(\"TASK\").innerHTML = s;\n    }\n    get_given_answer() {\n        return this.get_html_element_by_id(\"INPUT\").value;\n    }\n    print_on_input_response(given_answer) {\n        this.get_html_element_by_id(\"INPUT\").value = given_answer;\n    }\n    create_html_element_from_string(s) {\n        let parser = new DOMParser();\n        let elements = parser.parseFromString(s, \"text/html\").body;\n        return elements;\n    }\n    print_html_on_stage(s) {\n        // for(let e of this.create_html_element_from_string(s)) {\n        this.get_html_element_by_id(\"STAGE\")\n            .appendChild(this.create_html_element_from_string(s));\n        // }\n    }\n    print_html_on_error(s) {\n        // for(let e of this.create_html_element_from_string(s)) {\n        //     this.get_html_element_by_id(\"STAGE_ERROR\")\n        //         .appendChild(e);\n        // }\n        this.get_html_element_by_id(\"STAGE_ERROR\")\n            .appendChild(this.create_html_element_from_string(s));\n    }\n}\nexport function BROWSER_EXPERIMENT(creator) {\n    let browser_output = new Browser_Output_Writer();\n    let cfg = creator(browser_output);\n    SET_SEED(cfg.seed);\n    let this_measurement = cfg.measurement(browser_output);\n    let experiment_automata = create_code_experiment_execution({\n        experiment_name: cfg.experiment_name,\n        seed: cfg.seed,\n        introduction_pages: cfg.introduction_pages,\n        post_questionnaire: cfg.post_questionnaire,\n        pre_run_training_output: cfg.pre_run_training_instructions,\n        training_configuration: cfg.training_configuration,\n        pre_run_experiment_output: cfg.pre_run_experiment_instructions,\n        finish_pages: cfg.finish_pages,\n        layout: cfg.layout,\n        repetitions: cfg.repetitions,\n        task_configuration: cfg.task_configuration,\n        measurement: this_measurement,\n        finish_function: (exp) => {\n            // @ts-ignore\n            document.removeEventListener(\"keydown\", key_forwarder);\n            save_file_in_html(\"experimentdata.csv\", exp.generate_csv_data());\n        }\n    });\n    let key_forwarder = (e) => {\n        let key_string = key_event_string(e);\n        experiment_automata.input(key_string);\n    };\n    // @ts-ignore\n    document.addEventListener(\"keydown\", key_forwarder, false);\n    experiment_automata.set_active();\n}\n//# sourceMappingURL=Browser_Output_Writer.js.map","import { Experiment_Definition } from \"./Experiment_Definition.js\";\nimport { Book_Forwarder } from \"../Automata_Forwarders/Book_Forwarder.js\";\nimport { Sequential_Forwarder_Forwarder } from \"../Books/Sequential_Forwarder_Forwarder.js\";\nimport { Training_Execution_Forwarder } from \"../Automata_Forwarders/Training_Execution_Forwarder.js\";\nimport { Experiment_Forwarder } from \"../Automata_Forwarders/Experiment_Forwarder.js\";\nimport { Questionnaire_Forwarder } from \"../Automata_Forwarders/Questionnaire_Forwarder.js\";\nexport function init() { }\n// TODO: Both classes should be one!!!\n// ASAP!!!!\nexport class Code_Experiment_Definition extends Experiment_Definition {\n    create_code_all_experiment_automatas(cfg) {\n        let output_writer = cfg.measurement.output_writer();\n        let introduction_book = new Book_Forwarder(\"Introduction\", cfg.introduction_texts, cfg.measurement);\n        let ending_book = new Book_Forwarder(\"Finish\", cfg.finish_texts, cfg.measurement);\n        ending_book.automata.add_finish_action(() => cfg.finish_function(experiment_execution_forwarder.experiment_definition));\n        let experiment_execution_forwarder = new Experiment_Forwarder(cfg.pre_run_experiment_output, this, cfg.measurement);\n        experiment_execution_forwarder.init_experiment();\n        let cloned_experiment_definition = this.clone();\n        let training_forwarder = new Training_Execution_Forwarder(cfg.pre_run_training_output, cfg.training_configuration, cloned_experiment_definition, cfg.measurement);\n        training_forwarder.init_experiment();\n        let post_questionnaire = null;\n        if (cfg.post_questionnaire != undefined) {\n            post_questionnaire = new Questionnaire_Forwarder(cfg.post_questionnaire, cfg.measurement);\n        }\n        let forwarders = [];\n        if (introduction_book != null) {\n            forwarders.push(introduction_book);\n        }\n        if (training_forwarder.experiment_definition.tasks.length != 0)\n            forwarders.push(training_forwarder);\n        forwarders.push(experiment_execution_forwarder);\n        if (post_questionnaire != null) {\n            forwarders.push(post_questionnaire);\n            experiment_execution_forwarder.experiment_definition.questionnaires.push(post_questionnaire);\n        }\n        forwarders.push(ending_book);\n        let forwarder = new Sequential_Forwarder_Forwarder(forwarders);\n        return forwarder;\n    }\n    // WHATEVER HAPPENS ON EARTH - THIS SHOULD ONLY BE USED FOR TRAINING!\n    clone() {\n        let clone = new Code_Experiment_Definition(this.template.experiment_name, this.is_training, this.treatments_combinator.clone(), this.template.variables, this.template.repetitions, this.measurement, this.template.task_creator);\n        return clone;\n    }\n}\n//# sourceMappingURL=Code_Experiment_Definition.js.map","export function init() { }\nexport class Experiment_Definition {\n    constructor(experiment_name, is_training, treatments_combinator, variables, repetitions, measurement, task_creator) {\n        this.questionnaires = [];\n        this.tasks = [];\n        this.experiment_name = experiment_name;\n        this.is_training = is_training;\n        this.template = { experiment_name: experiment_name, variables: variables, repetitions: repetitions, task_creator: task_creator };\n        this.treatments_combinator = treatments_combinator;\n        this.variables = variables;\n        this.measurement = measurement;\n        this.experiment_definition_task_creator = task_creator;\n    }\n    init_experiment(is_training) {\n        this.tasks = this.treatments_combinator.create_tasks(this);\n    }\n    all_independent_variables() {\n        return this.variables.independent_variables;\n    }\n    generate_csv_data() {\n        let result = [];\n        // let questionnaire_variables = this.questionnaire_responses = cfg.questionnaire.filter((e: Input_Object)=> !(e instanceof Information)).map((e: Input_Object)=>e.variable);\n        for (let questionnaire of this.questionnaires) {\n            for (let question of questionnaire.questions) {\n                result.push(\"\\\"\" + question.variable_name + \"\\\"\" + \";\");\n            }\n        }\n        this.variables.print_to_array(result);\n        result.push(\"number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\\n\");\n        for (let task of this.tasks) {\n            for (let questionnaire of this.questionnaires) {\n                for (let question of questionnaire.questions) {\n                    result.push(\"\\\"\" + question.answer + \"\\\"\" + \";\");\n                }\n            }\n            for (let treatment_combination of task.treatment_combination.treatment_combination) {\n                result.push(treatment_combination.value + \";\");\n            }\n            result.push((task.invalid_answers.length + 1) + \";\");\n            result.push(task.expected_answer + \";\");\n            result.push(task.given_answer + \";\");\n            result.push(\"\" + (task.given_answer == task.expected_answer) + \";\");\n            result.push(task.required_milliseconds + \";\");\n            task.invalid_answers.forEach((a) => result.push(a[0] + \";\" + a[1] + \";\"));\n            result.push(\"\\n\");\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=Experiment_Definition.js.map","import dummy from \"../../modules_hard_import/seedrandom/seedrandom.js\";\nimport { convert_string_to_html_string } from \"../utils/Utils.js\";\nimport { Alternatives, Freetext, Information } from \"../Automata_Forwarders/Questionnaire_Forwarder.js\";\nexport function init() { }\nexport var VARIABLE_TYPE;\n(function (VARIABLE_TYPE) {\n    VARIABLE_TYPE[VARIABLE_TYPE[\"STRING\"] = 1] = \"STRING\";\n    VARIABLE_TYPE[VARIABLE_TYPE[\"NUMBER\"] = 2] = \"NUMBER\";\n})(VARIABLE_TYPE || (VARIABLE_TYPE = {}));\nexport function Reaction_Time(input) {\n    return (writer) => new Reaction_Time_Measurement(input(writer));\n}\n;\nexport function Reaction_Time_With_Penalty(input, penalty_seconds) {\n    return (writer) => new Reaction_Time_Penalty_Measurement(input(writer), penalty_seconds);\n}\n;\nexport function Time_to_finish(input) {\n    return (writer) => new Time_To_Finish_Measurement(input(writer));\n}\nexport function Time_to_finish_with_Penalty(input, penalty_seconds) {\n    return (writer) => new Time_To_Finish_With_Time_Penalty_Measurement(input(writer), penalty_seconds);\n}\nexport function keys(key_list) {\n    return (writer) => new Key_Pressing(key_list, writer);\n}\nexport function keys_0_to_9() {\n    return (writer) => new Key_Pressing([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], writer);\n}\nexport function text_input_experiment(output_writer) {\n    return new Free_Text_User_Input_Experiment(output_writer);\n}\nexport function text_input_experiment_with_pre_post_label(pre, post) {\n    return (output_writer) => new Free_Text_User_Input_Experiment_With_PrePost(output_writer, pre, post);\n}\nexport function information(question) {\n    return new Information(question);\n}\nexport function free_text(var_name, question) {\n    return new Freetext(var_name, question);\n}\nexport function alternatives(var_name, question, alternatives) {\n    return new Alternatives(var_name, question, alternatives);\n}\nexport class Experiment_Output_Writer {\n    convert_string_to_html_string(s) {\n        return convert_string_to_html_string(s);\n    }\n    string_page_command(s) {\n        return () => this.print_string_on_stage(s);\n    }\n    stage_string_pages_commands(pages) {\n        let ret = [];\n        for (let a of pages) {\n            ret.push(this.string_page_command(a));\n        }\n        return ret;\n    }\n    get_given_answer(input) {\n        return input;\n    }\n    print_on_input_response(given_answer) { }\n    set_focus_on_input() { }\n    clear_all() {\n        this.clear_state();\n        this.clear_stage();\n    }\n}\nexport class Measurement_Type {\n    constructor(input_type) {\n        this.input_type = input_type;\n    }\n    accepted_responses() {\n        return this.input_type.accepted_responses();\n    }\n    given_answer(i) {\n        return this.input_type.given_answer(i);\n    }\n    start_measurement(task) {\n        this.start_time = new Date().getTime().valueOf();\n        task.print_task();\n    }\n    stop_measurement(input, task) {\n        let end_time = new Date().getTime().valueOf();\n        task.given_answer = this.input_type.get_given_answer(input);\n        task.required_milliseconds = end_time - this.start_time;\n        task.do_print_after_task_information();\n    }\n    incorrect_response(i, task) {\n        let end_time = new Date().getTime().valueOf();\n        let given_answer = task.experiment_definition.measurement.get_given_answer(i);\n        task.invalid_answers.push([given_answer, end_time - this.start_time]);\n        task.do_print_error_message(this.input_type.get_given_answer(i));\n    }\n    output_writer() {\n        return this.input_type.output_writer;\n    }\n    get_given_answer(input) {\n        return this.input_type.get_given_answer(input);\n    }\n    demands_penalty() {\n        return false;\n    }\n    penalty_is_over() {\n        return true;\n    }\n}\nexport class Reaction_Time_Measurement extends Measurement_Type {\n    constructor(input_type) {\n        super(input_type);\n    }\n}\nexport class Reaction_Time_Penalty_Measurement extends Measurement_Type {\n    constructor(input_type, penalty_seconds) {\n        super(input_type);\n        this.penalty_started = false;\n        this.penalty_start_point = null;\n        this.penalty_miliseconds = penalty_seconds * 1000;\n    }\n    demands_penalty() {\n        return true;\n    }\n    incorrect_response(i, task) {\n        super.incorrect_response(i, task);\n        this.penalty_started = true;\n        this.penalty_start_point = new Date().getTime().valueOf();\n        task.do_print_error_message(this.input_type.get_given_answer(i));\n    }\n    delete_penalty() {\n        this.penalty_started = false;\n        this.penalty_start_point = null;\n    }\n    penalty_is_over() {\n        let diff = (new Date().getTime().valueOf()) - this.start_time;\n        return !this.penalty_started || diff >= this.penalty_miliseconds;\n    }\n    start_measurement(task) {\n        super.start_measurement(task);\n        this.delete_penalty();\n    }\n}\nexport class Time_To_Finish_Measurement extends Measurement_Type {\n    constructor(input_type) {\n        super(input_type);\n    }\n}\nexport class Time_To_Finish_With_Time_Penalty_Measurement extends Time_To_Finish_Measurement {\n    constructor(input_type, penalty_seconds) {\n        super(input_type);\n        this.penalty_started = false;\n        this.penalty_start_point = null;\n        this.penalty_miliseconds = penalty_seconds * 1000;\n    }\n    demands_penalty() {\n        return true;\n    }\n    incorrect_response(i, task) {\n        super.incorrect_response(i, task);\n        this.penalty_started = true;\n        this.penalty_start_point = new Date().getTime().valueOf();\n        task.do_print_error_message(this.input_type.get_given_answer(i));\n    }\n    delete_penalty() {\n        this.penalty_started = false;\n        this.penalty_start_point = null;\n    }\n    penalty_is_over() {\n        let diff = (new Date().getTime().valueOf()) - this.start_time;\n        return !this.penalty_started || diff >= this.penalty_miliseconds;\n    }\n    start_measurement(task) {\n        super.start_measurement(task);\n        this.delete_penalty();\n    }\n}\nexport class Experiment_Input_Type {\n    constructor(output_writer) {\n        this.output_writer = output_writer;\n    }\n    print_input_request() {\n        this.output_writer.ask_for_input();\n    }\n    get_given_answer(input_string) {\n        let value = this.output_writer.get_given_answer(input_string);\n        return value;\n    }\n}\nexport class Key_Pressing extends Experiment_Input_Type {\n    constructor(accepted_keys, output_writer) {\n        super(output_writer);\n        this.accepted_keys = accepted_keys;\n    }\n    accepted_responses() {\n        return this.accepted_keys;\n    }\n    given_answer(key_pressed) {\n        return key_pressed;\n    }\n    print_input_request() {\n        // I am a key....no need for input fields\n    }\n    get_given_answer(input_string) {\n        return input_string;\n    }\n}\nexport class Free_Text_User_Input_Experiment extends Experiment_Input_Type {\n    constructor(output_writer) {\n        super(output_writer);\n    }\n    accepted_responses() {\n        return [\"Enter\"];\n    }\n    given_answer(key_pressed) { }\n    print_input_request() {\n        this.output_writer.ask_for_input();\n    }\n}\nexport class Free_Text_User_Input_Experiment_With_PrePost extends Experiment_Input_Type {\n    constructor(output_writer, pre, post) {\n        super(output_writer);\n    }\n    accepted_responses() {\n        return [\"Enter\"];\n    }\n    given_answer(key_pressed) { }\n    print_input_request() {\n        this.output_writer.ask_for_input();\n    }\n}\nclass _Random {\n    constructor() {\n        // @ts-ignore\n        Math.seedrandom('1234567890');\n    }\n    // @ts-ignore\n    new_random_integer(upper_limit) {\n        return Math.trunc(upper_limit * Math.random());\n    }\n    set_seed(seed) {\n        // @ts-ignore\n        Math.seedrandom(seed);\n    }\n}\nexport const Random = new _Random();\nexport function SET_SEED(seed) {\n    Random.set_seed(seed);\n}\nexport function random_integer_up_to_excluding(upper_limit) {\n    return Random.new_random_integer(upper_limit);\n}\nexport function do_random_array_sort(array) {\n    let copy = [...array];\n    let result = [];\n    while (copy.length > 0) {\n        result.push(copy.splice(random_integer_up_to_excluding(copy.length), 1)[0]);\n    }\n    return result;\n}\nexport function random_array_element_and_remove(array) {\n    let position = random_integer_up_to_excluding(array.length);\n    let ret = array[position];\n    array.splice(position, 1);\n    return ret;\n}\nexport function random_array_element(array) {\n    return array[random_integer_up_to_excluding(array.length)];\n}\nexport function random_array_element_without(array, exceptions) {\n    let copy = array.filter(e => !exceptions.includes(e));\n    return random_array_element(copy);\n}\nexport function random_array_elements_without_repetitions(array, number_of_elements_to_chose) {\n    let randomly_sorted_array = do_random_array_sort(array);\n    return randomly_sorted_array.slice(0, number_of_elements_to_chose);\n}\nexport function random_lower_case_letter() {\n    return String.fromCharCode(97 + random_integer_up_to_excluding(26));\n}\nexport function random_lower_case_letter_except(letters) {\n    while (true) {\n        let ret = String.fromCharCode(97 + random_integer_up_to_excluding(26));\n        if (!letters.includes(ret))\n            return ret;\n    }\n}\nexport function random_upper_case_letter_except(letters) {\n    while (true) {\n        let ret = String.fromCharCode(97 + random_integer_up_to_excluding(26)).toUpperCase();\n        if (!letters.includes(ret))\n            return ret;\n    }\n}\n// This invocation just makes sure that RANDOM is loaded\ndummy();\n//# sourceMappingURL=Experimentation.js.map","export class Task {\n    constructor(tc, experiment_definition, text) {\n        this.expected_answer = \"\";\n        this.given_answer = \"\";\n        this.required_milliseconds = null;\n        this.task_number_in_execution = -1;\n        this.invalid_answers = [];\n        this.is_training = false;\n        this.has_pre_task_description = false;\n        this.do_print_task = () => {\n            throw new Error(\"Method not implemented.\");\n        };\n        this.do_print_pre_task = () => {\n            throw new Error(\"Method not implemented.\");\n        };\n        this.do_print_error_message = () => {\n            throw new Error(\"Method not implemented.\");\n        };\n        this.accepts_answer_function = (answer) => true;\n        this.do_print_after_task_information = () => {\n            throw new Error(\"Method not implemented.\");\n        };\n        this.treatment_combination = tc;\n        this.experiment_definition = experiment_definition;\n        // this.code_string(text);\n    }\n    accepts_answer(input) {\n        let answer = this.experiment_definition.measurement.get_given_answer(input);\n        return this.accepts_answer_function(answer);\n    }\n    next_task() {\n        if (this.task_number_in_execution < this.experiment_definition.tasks.length)\n            return this.experiment_definition.tasks[this.task_number_in_execution];\n        else\n            return null;\n    }\n    html_string_with_cmd(html_string, cmd) {\n        // this.write_action = (writer: Automata_IO) => {\n        //     writer.write(AUTOMATA_OUTPUT_WRITER_ACTION.OVERWRITE, AUTOMATA_OUTPUT_WRITER_TAGS.STAGE, html_line(html_string));\n        //     cmd();\n        // }\n    }\n    html_node_with_cmd(element, cmd) {\n        // this.write_action = (writer: Automata_IO) => {\n        //     writer.write(AUTOMATA_OUTPUT_WRITER_ACTION.OVERWRITE, AUTOMATA_OUTPUT_WRITER_TAGS.STAGE, html_node(element));\n        //     cmd();\n        // }\n    }\n    after_task_string_constructor(a_string_constructor) {\n        // this.after_task_write_action = () => (writer: Automata_IO) =>writer.write(AUTOMATA_OUTPUT_WRITER_ACTION.APPEND, AUTOMATA_OUTPUT_WRITER_TAGS.STAGE, text_line(a_string_constructor()));\n    }\n    print_task() {\n        this.do_print_task();\n        this.print_input_request();\n    }\n    print_pre_task_info() {\n        this.do_print_pre_task();\n    }\n    print_input_request() {\n        this.experiment_definition.measurement.input_type.print_input_request();\n    }\n    treatment_value(treatment_name) {\n        for (let treatment of this.treatment_combination.treatment_combination)\n            if (treatment.variable.name === treatment_name)\n                return treatment.value;\n        throw \"Unknown treatment: \" + treatment_name;\n    }\n    set_computed_variable_value(variable_name, value) {\n        for (let treatment of this.treatment_combination.treatment_combination)\n            if (treatment.variable.name === variable_name) {\n                treatment.value = value;\n                return;\n            }\n        throw \"Unknown treatment: \" + variable_name;\n    }\n}\n//# sourceMappingURL=Task.js.map","import { Treatment } from \"./treatments/Treatment.js\";\nimport { iterate_both } from \"../utils/loops/loop.js\";\nimport { Task } from \"./Task.js\";\nimport { Treatment_Combination } from \"./treatments/Treatment_Combination.js\";\nexport class Training_Configuration {\n    constructor(training_configuration) {\n        this.can_be_cancelled = true;\n        this.can_be_repeated = true;\n        if (training_configuration === undefined)\n            return;\n        if (training_configuration.fixed_treatments != undefined)\n            this.fixed_treatments = training_configuration.fixed_treatments;\n        this.can_be_cancelled = training_configuration.can_be_cancelled;\n        this.can_be_repeated = training_configuration.can_be_repeated;\n    }\n    init_experiment(experiment_definition) {\n        experiment_definition.tasks = [];\n        if (this.fixed_treatments != undefined) {\n            for (let a_treatment_combination of this.fixed_treatments) {\n                let treatment_combination = new Treatment_Combination([]);\n                iterate_both(experiment_definition.all_independent_variables(), a_treatment_combination, (variable, value) => {\n                    treatment_combination.treatment_combination.push(new Treatment(variable, value));\n                });\n                let task = new Task(treatment_combination, experiment_definition, \"\");\n                task.is_training = true;\n                experiment_definition.experiment_definition_task_creator(task);\n                experiment_definition.tasks.push(task);\n            }\n        }\n        else {\n            experiment_definition.init_experiment(true);\n        }\n    }\n}\n//# sourceMappingURL=Training_Configuration.js.map","import { Treatments_Combinator } from \"../treatments/Treatments_Combinator.js\";\nimport { Code_Experiment_Definition } from \"../Code_Experiment_Definition.js\";\nimport { Training_Configuration } from \"../Training_Configuration.js\";\nimport { Independent_Variables } from \"../treatments/Independent_Variables.js\";\nexport function create_code_experiment_execution(cfg) {\n    let variables = Independent_Variables.from_layout(cfg.layout);\n    let all_treatment_combinations = new Treatments_Combinator(variables, cfg.repetitions);\n    let experiment_definition = new Code_Experiment_Definition(cfg.experiment_name, false, all_treatment_combinations, variables, cfg.repetitions, cfg.measurement, cfg.task_configuration);\n    let training_configuration = new Training_Configuration(cfg.training_configuration);\n    let experiment_execution = experiment_definition.create_code_all_experiment_automatas({\n        seed: cfg.seed,\n        introduction_texts: cfg.introduction_pages,\n        post_questionnaire: cfg.post_questionnaire,\n        pre_run_training_output: cfg.pre_run_training_output,\n        training_configuration: training_configuration,\n        // post_run_training_output: cfg.post_run_training_output,\n        pre_run_experiment_output: cfg.pre_run_experiment_output,\n        // post_run_experiment_output: cfg.post_run_experiment_output,\n        finish_texts: cfg.finish_pages,\n        measurement: cfg.measurement,\n        finish_function: cfg.finish_function\n    });\n    return experiment_execution;\n}\n//# sourceMappingURL=create_code_experiment_execution.js.map","import { Treatment } from \"./Treatment.js\";\nexport class Independent_Variable {\n    constructor(name, treatments) {\n        this.treatments = [];\n        this.name = name;\n        for (let aString of treatments) {\n            this.treatments.push(new Treatment(this, aString));\n        }\n    }\n}\n//# sourceMappingURL=Independent_Variable.js.map","import { Independent_Variable } from \"./Independent_Variable.js\";\nimport { all_array_combinations } from \"../../utils/arrays/all_array_combinations.js\";\nimport { Treatment_Combination } from \"./Treatment_Combination.js\";\nexport class Independent_Variables {\n    constructor() {\n        this.independent_variables = [];\n    }\n    push_variable(n, treatments) {\n        this.independent_variables.push(new Independent_Variable(n, treatments));\n    }\n    print_to_array(result) {\n        for (let variable of this.independent_variables) {\n            result.push(variable.name + \";\");\n        }\n    }\n    create_treatment_combinations() {\n        let treatment_combinations = [];\n        all_array_combinations(this.independent_variables.map(t => t.treatments), (treatments) => {\n            treatment_combinations.push(new Treatment_Combination([...treatments]));\n        });\n        return treatment_combinations;\n    }\n    get_variable_named(var_name) {\n        for (let v of this.independent_variables) {\n            if (v.name === var_name)\n                return v;\n        }\n        throw \"Unknown independent variable named: \" + var_name;\n    }\n    static from_layout(layout) {\n        let variables = new Independent_Variables();\n        for (let aVar of layout) {\n            variables.push_variable(aVar.variable, aVar.treatments);\n        }\n        return variables;\n    }\n}\n//# sourceMappingURL=Independent_Variables.js.map","export class Treatment {\n    constructor(variable, value) {\n        this.variable = variable;\n        this.value = \"\" + value;\n    }\n    clone() {\n        let ret = new Treatment(this.variable, this.value);\n        return ret;\n    }\n}\n//# sourceMappingURL=Treatment.js.map","export class Treatment_Combination {\n    constructor(treatment_combination) {\n        this.treatment_combination = [];\n        this.treatment_combination = treatment_combination;\n    }\n    clone() {\n        let ret = new Treatment_Combination([]);\n        for (let treatment of this.treatment_combination) {\n            ret.treatment_combination.push(treatment.clone());\n        }\n        return ret;\n    }\n}\n//# sourceMappingURL=Treatment_Combination.js.map","import { Task } from \"../Task.js\";\nimport { do_random_array_sort } from \"../Experimentation.js\";\n/**\n * All experiment definitions contain the treatment combinations (including repetitions)\n */\nexport class Treatments_Combinator {\n    constructor(variables, repetitions) {\n        this.variables = variables;\n        this.repetitions = repetitions;\n    }\n    clone() {\n        return new Treatments_Combinator(this.variables, this.repetitions);\n    }\n    create_treatment_combinations() {\n        let treatment_combinations = [];\n        for (let r = 0; r < this.repetitions; r++) {\n            treatment_combinations = treatment_combinations.concat(this.variables.create_treatment_combinations());\n        }\n        return treatment_combinations;\n    }\n    create_tasks(experiment_definition) {\n        let tasks = [];\n        for (let treatment_combination of this.create_treatment_combinations()) {\n            let task = new Task(treatment_combination.clone(), experiment_definition, \"\");\n            try {\n                experiment_definition.experiment_definition_task_creator(task);\n            }\n            catch (ex) {\n                console.log(\"halt\");\n                experiment_definition.experiment_definition_task_creator(task);\n            }\n            task.is_training = experiment_definition.is_training;\n            tasks.push(task);\n        }\n        return do_random_array_sort(tasks);\n    }\n    get_variable_named(var_name) {\n        return this.variables.get_variable_named(var_name);\n    }\n}\n//# sourceMappingURL=Treatments_Combinator.js.map","import { do_tests } from \"./Utils_Test.js\";\nexport function init() { }\nexport class RefObject {\n    constructor(value) {\n        this.value = value;\n    }\n}\nexport function contains(collection, element) {\n    return collection.indexOf(element) != -1;\n}\nexport function cartesian_product(arr1, arr2, f) {\n    for (let i = 0; i < arr1.length; i++) {\n        for (let j = 0; i < arr2.length; i++) {\n            f(arr1[i], arr2[j]);\n        }\n    }\n}\nexport function guarantee_test(f) {\n    let result = f();\n    if (!result)\n        throw \"Something is wrong here\";\n}\nexport function guarantee_true(trueFalse) {\n    if (!trueFalse)\n        throw \"Something is wrong here\";\n}\nexport function convert_string_to_html_string(s) {\n    return s\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\n/g, \"<br/>\")\n        .replace(/ /g, '&nbsp;');\n}\nexport function key_event_string(event) {\n    var postfix = \"\";\n    if (event.key == \"Alt\")\n        if (event.ctrlKey)\n            return \"Alt+Ctrl\";\n    if (event.key == \"Control\")\n        if (event.altKey)\n            return \"Ctrl+Alt\";\n    postfix = postfix + (event.altKey ? \"+Alt\" : \"\");\n    postfix = postfix + (event.ctrlKey ? \"+Control\" : \"\");\n    if (event.key == \"Alt\")\n        return \"Alt\";\n    // if(event.key==\"Control\") return postfix;\n    return \"\" + event.key + postfix;\n}\nexport function array_to_sequence_of_size_(sequence) {\n    var ret = [];\n    var counter = 0;\n    for (var element of sequence) {\n        ret.push(counter);\n        counter++;\n    }\n    return ret;\n}\nexport function csv_encoding(a_string) {\n    let add_escapes = a_string.split(\"\\\"\").join(\"\\\"\\\"\");\n    return \"\\\"\" + add_escapes + \"\\\"\";\n}\nexport function save_file_in_html(filename, data) {\n    const blob = new Blob(data, { type: 'application/ssc' });\n    const elem = window.document.createElement('a');\n    elem.href = window.URL.createObjectURL(blob);\n    elem.download = filename;\n    document.body.appendChild(elem);\n    elem.click();\n    document.body.removeChild(elem);\n}\nexport function add_upload_push_button(url, button_test, data) {\n    const elem = window.document.createElement('form');\n    elem.setAttribute(\"action\", url);\n    elem.setAttribute(\"method\", \"post\");\n    const i = window.document.createElement('input');\n    i.setAttribute(\"name\", \"data\");\n    i.setAttribute(\"type\", \"hidden\");\n    i.setAttribute(\"value\", data);\n    elem.appendChild(i);\n    const j = window.document.createElement('input');\n    j.setAttribute(\"value\", button_test);\n    j.setAttribute(\"type\", \"submit\");\n    elem.appendChild(j);\n    document.body.appendChild(elem);\n}\nexport function upload_experiment_to_server(experiment) {\n    let csv = experiment.generate_csv_data();\n    let currentUrl = window.location.href;\n    // const response = fetch('http://127.0.0.1:8088', {\n    //     method: 'POST',\n    //     body: JSON.stringify({experiment_name : \"dummy2\", experiment_data: data}),\n    //     headers: {'Content-Type': 'application/json; charset=UTF-8'} })\n    console.log(currentUrl);\n}\ndo_tests();\n//# sourceMappingURL=Utils.js.map","// Does not do anything any longer. I still keep it here - probably need it in the future.\n// Is executed by Utils.\nexport function do_tests() {\n    // let encoded_string = \"\";\n    //\n    // encoded_string =csv_encoding('\"');\n    // console.log(encoded_string);\n    //\n    // encoded_string = csv_encoding('\"\"');\n    // console.log(encoded_string);\n    //\n    // encoded_string = csv_encoding('\"\"\"\"\"\"\"\"\"\"');\n    // console.log(encoded_string);\n    //\n    // encoded_string = csv_encoding('\";');\n    // console.log(encoded_string);\n}\n//# sourceMappingURL=Utils_Test.js.map","function all_array_combinations_internal(arr, combination, f) {\n    if (arr.length == 0) {\n        f(combination);\n    }\n    else {\n        let last = arr.shift();\n        for (let e of last) {\n            combination.push(e);\n            all_array_combinations_internal(arr, combination, f);\n            combination.pop();\n        }\n        arr.unshift(last);\n    }\n}\n/**\n *  @param arr: An array of arrays\n *  executes for all combinations of arrays the function f\n */\nexport function all_array_combinations(arr, f) {\n    all_array_combinations_internal(arr, [], f);\n}\n/**\n * Examples:\n *   all_x_tupel(1, [1, 2, 3]) = [1, 2, 3]\n *   all_x_tupel(2, [1, 2, 3]) = [[1, 1], [1,2]], [1,3], [2,1]....[3,3]]\n\n */\nexport function all_x_tupel(tupel_length, arr) {\n    let result = [];\n    if (tupel_length == 1) {\n        for (let e of arr) {\n            result.push([e]);\n        }\n        return result;\n    }\n    let x_minus_one_tupel = all_x_tupel(tupel_length - 1, arr);\n    for (let e of arr) {\n        for (let a_x_minux_one_tupel of x_minus_one_tupel) {\n            result.push([e, ...a_x_minux_one_tupel]);\n        }\n    }\n    return result;\n}\n/**\n * Examples:\n *   all_different_x_tupel(3, [1, 2, 3]) = [[1, 2, 3], [1,3,2], [2,1,3], [2,3,1]. [3,1,2], [3,2,1]]\n *\n*/\nexport function all_different_x_tupel(tupel_length, arr) {\n    let result = [];\n    if (tupel_length == 1) {\n        for (let e of arr) {\n            result.push([e]);\n        }\n        return result;\n    }\n    for (let e = 0; e < arr.length; e++) {\n        let arr_without_current_element = arr.slice();\n        arr_without_current_element.splice(e, 1);\n        let x_minus_one_tupel = all_different_x_tupel(tupel_length - 1, arr_without_current_element);\n        for (let a_x_minux_one_tupel of x_minus_one_tupel) {\n            result.push([arr[e], ...a_x_minux_one_tupel]);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=all_array_combinations.js.map","export function iterate_with_counter(array, f) {\n    let counter = 0;\n    for (let e of array) {\n        f(e, counter++);\n    }\n}\nexport function iterate_both(a1, a2, f) {\n    if (a1.length > a2.length)\n        throw \"Cannot loop both: first array has length: \" + a1.length + \", but second has length \" + a2.length;\n    let counter = 0;\n    for (let e of a1) {\n        f(e, a2[counter++]);\n    }\n}\nexport function iterate(array) {\n    return new Iterator(array);\n}\nexport class Iterator {\n    constructor(array) {\n        this.array = array;\n    }\n    do(f) {\n        for (let element of this.array)\n            f(element);\n    }\n    do_with_counter(f) {\n        for (let c = 0; c < this.array.length; c++) {\n            f(this.array[c], c);\n        }\n    }\n}\nexport function repeat(n, f) {\n    for (let c = 0; c < n; c++) {\n        f(c);\n    }\n    // return new Repeat(0)\n}\nexport function repeat_n_times(n) {\n    return new Repeat(n);\n}\nexport function repeat_(n) {\n    return new Repeat(n);\n}\nexport class Repeat {\n    constructor(counter) {\n        this.counter = counter;\n    }\n    and_collect(f) {\n        let arr = [];\n        for (let c = 1; c <= this.counter; c++) {\n            arr.push(f(c));\n        }\n        return arr;\n    }\n    _times(f) {\n        for (let c = 1; c <= this.counter; c++) {\n            f();\n        }\n    }\n    times(f) {\n        for (let c = 1; c <= this.counter; c++) {\n            f(c);\n        }\n    }\n}\n//# sourceMappingURL=loop.js.map","/*\r\nCopyright 2019 David Bau.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n*/\r\n\r\n(function (global, pool, math) {\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\n\r\nvar width = 256,        // each RC4 output is 0 <= x < 256\r\n    chunks = 6,         // at least six RC4 outputs for each double\r\n    digits = 52,        // there are 52 significant digits in a double\r\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\r\n    startdenom = math.pow(width, chunks),\r\n    significance = math.pow(2, digits),\r\n    overflow = significance * 2,\r\n    mask = width - 1,\r\n    nodecrypto          // node.js crypto module, initialized at the bottom.\r\n\r\n//\r\n// seedrandom()\r\n// This is the seedrandom function described above.\r\n//\r\nfunction seedrandom(seed, options, callback) {\r\n  var key = [];\r\n  options = (options == true) ? { entropy: true } : (options || {});\r\n\r\n  // Flatten the seed string or build one from local entropy if needed.\r\n  var shortseed = mixkey(flatten(\r\n    options.entropy ? [seed, tostring(pool)] :\r\n    (seed == null) ? autoseed() : seed, 3), key);\r\n\r\n  // Use the seed to initialize an ARC4 generator.\r\n  var arc4 = new ARC4(key);\r\n\r\n  // This function returns a random double in [0, 1) that contains\r\n  // randomness in every bit of the mantissa of the IEEE 754 value.\r\n  var prng = function() {\r\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\r\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\r\n        x = 0;                          //   and no 'extra last byte'.\r\n    while (n < significance) {          // Fill up all significant digits by\r\n      n = (n + x) * width;              //   shifting numerator and\r\n      d *= width;                       //   denominator and generating a\r\n      x = arc4.g(1);                    //   new least-significant-byte.\r\n    }\r\n    while (n >= overflow) {             // To avoid rounding up, before adding\r\n      n /= 2;                           //   last byte, shift everything\r\n      d /= 2;                           //   right using integer math until\r\n      x >>>= 1;                         //   we have exactly the desired bits.\r\n    }\r\n    return (n + x) / d;                 // Form the number within [0, 1).\r\n  };\r\n\r\n  prng.int32 = function() { return arc4.g(4) | 0; }\r\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\r\n  prng.double = prng;\r\n\r\n  // Mix the randomness into accumulated entropy.\r\n  mixkey(tostring(arc4.S), pool);\r\n\r\n  // Calling convention: what to return as a function of prng, seed, is_math.\r\n  return (options.pass || callback ||\r\n      function(prng, seed, is_math_call, state) {\r\n        if (state) {\r\n          // Load the arc4 state from the given state if it has an S array.\r\n          if (state.S) { copy(state, arc4); }\r\n          // Only provide the .state method if requested via options.state.\r\n          prng.state = function() { return copy(arc4, {}); }\r\n        }\r\n\r\n        // If called as a method of Math (Math.seedrandom()), mutate\r\n        // Math.random because that is how seedrandom.js has worked since v1.0.\r\n        if (is_math_call) {\r\n          math[rngname] = prng;\r\n          return seed;\r\n        }\r\n\r\n        // Otherwise, it is a newer calling convention, so return the\r\n        // prng directly.\r\n        else return prng;\r\n      })(\r\n  prng,\r\n  shortseed,\r\n  'global' in options ? options.global : (this == math),\r\n  options.state);\r\n}\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\nfunction ARC4(key) {\r\n  var t, keylen = key.length,\r\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\r\n\r\n  // The empty key [] is treated as [0].\r\n  if (!keylen) { key = [keylen++]; }\r\n\r\n  // Set up S using the standard key scheduling algorithm.\r\n  while (i < width) {\r\n    s[i] = i++;\r\n  }\r\n  for (i = 0; i < width; i++) {\r\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\r\n    s[j] = t;\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  (me.g = function(count) {\r\n    // Using instance members instead of closure state nearly doubles speed.\r\n    var t, r = 0,\r\n        i = me.i, j = me.j, s = me.S;\r\n    while (count--) {\r\n      t = s[i = mask & (i + 1)];\r\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\r\n    }\r\n    me.i = i; me.j = j;\r\n    return r;\r\n    // For robust unpredictability, the function call below automatically\r\n    // discards an initial batch of values.  This is called RC4-drop[256].\r\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\r\n  })(width);\r\n}\r\n\r\n//\r\n// copy()\r\n// Copies internal state of ARC4 to or from a plain object.\r\n//\r\nfunction copy(f, t) {\r\n  t.i = f.i;\r\n  t.j = f.j;\r\n  t.S = f.S.slice();\r\n  return t;\r\n};\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\nfunction flatten(obj, depth) {\r\n  var result = [], typ = (typeof obj), prop;\r\n  if (depth && typ == 'object') {\r\n    // console.log(obj);\r\n    for (prop in obj) {\r\n      // console.log(prop);\r\n      try {\r\n        result.push(\r\n            flatten(\r\n                obj[\r\n                    prop\r\n                ],\r\n                depth - 1)\r\n        );\r\n      } catch (e) {}\r\n    }\r\n  }\r\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\nfunction mixkey(seed, key) {\r\n  var stringseed = seed + '', smear, j = 0;\r\n  while (j < stringseed.length) {\r\n    key[mask & j] =\r\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\r\n  }\r\n  return tostring(key);\r\n}\r\n\r\n//\r\n// autoseed()\r\n// Returns an object for autoseeding, using window.crypto and Node crypto\r\n// module if available.\r\n//\r\nfunction autoseed() {\r\n  try {\r\n\r\n    nodecrypto = require('crypto');\r\n    var out = crypto.randomByte\r\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\r\n      // The use of 'out' to remember randomBytes makes tight minified code.\r\n      out = out(width);\r\n    } else {\r\n      out = new Uint8Array(width);\r\n      (global.crypto || global.msCrypto).getRandomValues(out);\r\n    }\r\n    return tostring(out);\r\n  } catch (e) {\r\n    var browser = global.navigator,\r\n        plugins = browser && browser.plugins;\r\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\r\n  }\r\n}\r\n\r\n//\r\n// tostring()\r\n// Converts an array of charcodes to a string\r\n//\r\nfunction tostring(a) {\r\n  return String.fromCharCode.apply(0, a);\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to interfere with deterministic PRNG state later,\r\n// seedrandom will not call math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(math.random(), pool);\r\n\r\n//\r\n// Nodejs and AMD support: export the implementation as a module using\r\n// either convention.\r\n//\r\nif ((typeof module) == 'object' && module.exports) {\r\n  module.exports = seedrandom;\r\n  // When in node.js, try using crypto package for autoseeding.\r\n  math['seed' + rngname] = seedrandom;\r\n  try {\r\n    nodecrypto = require('crypto');\r\n  } catch (ex) {}\r\n} else if ((typeof define) == 'function' && define.amd) {\r\n  define(function() { return seedrandom; });\r\n} else {\r\n  // When included as a plain script, set up Math.seedrandom global.\r\n  math['seed' + rngname] = seedrandom;\r\n}\r\n\r\n  // module.exports = seedrandom;\r\n\r\n// End anonymous scope, and pass initial values.\r\n})(\r\n  // global: `self` in browsers (including strict mode and web workers),\r\n  // otherwise `this` in Node and other environments\r\n  (typeof self !== 'undefined') ? self : this,\r\n  [],     // pool: entropy pool starts empty\r\n  Math    // math: package containing random, pow, and seedrandom\r\n);\r\n\r\nexport function INIT_RANDOM(){\r\n  console.log(\"DONE\");\r\n}\r\n\r\nexport default function dummy() {\r\n  console.log(\"DONE\");\r\n}\r\n\r\nconsole.log(\"RANDOM_INIT\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { BROWSER_EXPERIMENT } from \"../../N-of-1-Experimentation/modules/Experimentation/Browser_Output_Writer.js\";\r\nimport {\r\n    alternatives,\r\n    Experiment_Output_Writer, keys, random_array_element, Reaction_Time, Time_to_finish , text_input_experiment,\r\n    SET_SEED\r\n} from \"../../N-of-1-Experimentation/modules/Experimentation/Experimentation.js\";\r\nimport { Task } from \"../../N-of-1-Experimentation/modules/Experimentation/Task.js\";\r\nimport { Code_Generation_Task, get_tasks_explanation } from \"./code/Feature_count_states_2.js\";\r\n\r\nlet SEED = \"39\";\r\n\r\nSET_SEED(SEED);\r\n\r\n//let tasks = create_tasks_grouped_by_tool();\r\n//let tasks = create_tasks_grouped_by_error_position();\r\n\r\nlet experiment_configuration_function = (writer: Experiment_Output_Writer) => {\r\n    return {\r\n        experiment_name: \"Count-States-Experiment\",\r\n        seed: SEED,\r\n\r\n        introduction_pages: [\r\n            //() => writer.print_string_on_stage(\r\n            //    \"Thank you for participating in the experiment. This experiment compares four different global state management tools in terms of readability.<br><br>\" +\r\n            //    \"<p>Before starting, please switch your browser to full-screen mode (press <code>[F11]</code>).</p>\" +\r\n            //    \"The next page introduces the state management tools.\"),\r\n\r\n            () => writer.print_string_on_stage(\r\n                \"Thank you for participating in this experiment.<br><br>\" +\r\n                \"This study evaluates how easily developers can understand global state management tools in React by inspecting code snippets.<br><br>\" +\r\n                \"Your task will be to read code examples and count the number of <strong>valid exported global states</strong> (not actions).<br><br>\" +\r\n                \"<p>Before starting, please switch your browser to full-screen mode by pressing <code>[F11]</code> on your keyboard.</p>\"\r\n                //\"Click 'Next' to begin with a short introduction to global state and the tools you'll encounter.\"\r\n            ),\r\n\r\n            () => writer.print_string_on_stage(\r\n                \"In React, 'state' refers to data that a component uses to render content or perform logic. For example, a user's name, a counter, or a checkbox value are all forms of state.<br><br>\" +\r\n                \"Sometimes, this state needs to be shared between different parts of the app. When that happens, we call it <strong>global state</strong>.<br><br>\" +\r\n                \"Global state management tools help developers manage shared data in a clean, structured way. In this experiment, we will compare four such tools.\"\r\n            ),\r\n\r\n            () => writer.print_string_on_stage(\r\n                \"Your task is to analyze short code snippets using four different state management tools: <strong>Context</strong>, <strong>Zustand</strong>, <strong>Redux</strong>, and <strong>Jotai</strong>.<br><br>\" +\r\n                \"For each snippet, count how many <strong>global states</strong> (not actions or functions) are <em>correctly defined and exported</em>.<br><br>\" +\r\n                \"<strong>Important:</strong> Some tools will contain code errors. Only count a state if it is:<br>\" +\r\n                \"<ul>\" +\r\n                \"<li>Defined properly</li>\" +\r\n                \"<li>Used correctly</li>\" +\r\n                \"<li>Included in the tool’s export or value structure</li>\" +\r\n                \"</ul>\" +\r\n                \"Enter a number between 0 and 9 as your answer for each snippet.\"\r\n            ),\r\n\r\n            () => writer.print_string_on_stage(\r\n                \"The following examples demonstrate key <strong>React</strong> features such as <code>useState</code> and component props.<br><br>\" +\r\n                \"The <code>useState</code> Hook is used to add state to a functional component. For example:<br>\" +\r\n                \"<code>const [count, setCount] = useState(0);</code><br><br>\" +\r\n                \"This initializes a state variable named <code>count</code> and a corresponding function, <code>setCount</code>, for updating its value.<br><br>\" +\r\n                \"While direct usage of these features is not required, recognizing their purpose will help in understanding the code examples provided.\"\r\n            ),\r\n\r\n            () => writer.print_string_on_stage(\r\n                \"Throughout the examples, there are often function types written like this:<br><br>\" +\r\n                \"<code>a: () => void</code><br><br>\" +\r\n                \"This means <code>a</code> is a function that takes no arguments and returns nothing (i.e., <code>void</code>).<br><br>\" +\r\n                \"Although this may appear in interfaces or stores, please note that <strong>functions like this are not considered state</strong> and should not be included in the experiment.\"\r\n            ),\r\n\r\n            () => writer.print_string_on_stage(\r\n                \"<strong>Context</strong> is a built-in feature of React that allows you to share state across components without passing props manually.<br><br>\" +\r\n                \"In this experiment, check if each state is:<br>\" +\r\n                \"1. Declared in the interface, <span style='display:inline-block; width:12px; height:12px; background:darkblue; margin-left:5px;'></span><br>\" +\r\n                \"2. created with <code>useState()</code>, and <span style='display:inline-block; width:12px; height:12px; background:darkgreen; margin-left:5px;'></span><br>\" +\r\n                \"3. Passed into the <code>value</code> of the context provider. <span style='display:inline-block; width:12px; height:12px; background:aqua; margin-left:5px;'></span><br><br>\" +\r\n                \"Ignore any functions inside the <code>interface</code> as they are not states.\" +\r\n\r\n                \"<table style='border: 1px solid black;'>\" +\r\n                \"<tr><td style='border: 3px solid darkblue; padding: 5px;'><code>\" +\r\n                \"interface testType {<br>\" +\r\n                \"&nbsp;&nbsp;a: number,<br>\" +\r\n                \"&nbsp;&nbsp;b: () => void,<br>\" +\r\n                \"&nbsp;&nbsp;c: number,<br>\" +\r\n                \"}</td></tr>\" +\r\n\r\n                \"<tr><td style='border: 3px solid darkgreen; padding: 5px;'><code>\" +\r\n                \"export const TestProvider = ({children}) => {<br>\" +\r\n                \"&nbsp;&nbsp;const [a, setA] = useState<number>(0);<br>\" +\r\n                \"&nbsp;&nbsp;const b = () => {<br>\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;setA(10);<br>\" +\r\n                \"&nbsp;&nbsp;};<br>\" +\r\n                \"</td></tr>\" +\r\n\r\n                \"<tr><td style='border: 3px solid aqua; padding: 5px;'><code>\" +\r\n                \"&nbsp;&nbsp;return (<br>\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;&lt;TestContext.Provider value={{ a, b, c, d }}&gt;<br>\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{children}\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TestContext.Provider&gt;<br>\" +\r\n                \"&nbsp;&nbsp;)<br>\" +\r\n                \"}</td></tr>\" +\r\n\r\n                \"</table></code>\" +\r\n                \"<br> In this case <strong>'a'</strong> is a state that meets all three criteria and can be counted, while <strong>'c'</strong> is only declared in the <code>interface</code> and passed in the value of the <code>provider</code> but not fulfilling the other conditions, therefore it should <strong>NOT</strong> be counted!\" +\r\n                \"<br> Contrary to <strong>'c'</strong>, <strong>'b'</strong> also is declared, created and passed in the value of the provider, but it is a function and not a state, therefore it is not to be counted aswell.\" +\r\n                \"<br> Finally, <strong>'d'</strong> is only passed as a value of the provider but does not fulfill the other condition, therefore it should <strong>NOT</strong> be counted!<br><br>\"+\r\n                \"<strong>Only count states that meet all three criteria and ignore any functions.</strong>\"\r\n            ),\r\n\r\n            () => writer.print_string_on_stage(\"\" +\r\n                \"In <strong>Zustand</strong>, you define a store using the <code>create()</code> function. The store allows global state management and includes:<br>\" +\r\n                \"<ul>\" +\r\n                \"<li>Simple key-value pairs for state</li>\" +\r\n                \"<li>Functions (methods) to modify the state</li>\" +\r\n                \"</ul>\" +\r\n                \"In this experiment, count every state that is:<br>\" +\r\n                \"1. Declared in the <code>type</code>, and <span style='display:inline-block; width:12px; height:12px; background:darkblue; margin-left:5px;'></span><br>\" +\r\n                \"2. Implemented correctly inside the store function. <span style='display:inline-block; width:12px; height:12px; background:darkgreen; margin-left:5px;'></span><br>\" +\r\n                \"Some states may be declared but never initialized, or used without being typed. These should not be counted.<br><br>\" +\r\n                \"Ignore any functions inside the store as they are not states.<br><br>\" +\r\n\r\n                \"<table style='border: 1px solid black;'>\" +\r\n                \"<tr><td style='border: 3px solid darkblue; padding: 5px;'><code>\" +\r\n                \"type testState = {<br>\" +\r\n                \"&nbsp;&nbsp;a: number,<br>\" +\r\n                \"&nbsp;&nbsp;b: () => void,<br>\" +\r\n                \"&nbsp;&nbsp;c: number,<br>\" +\r\n                \"}</td></tr>\" +\r\n\r\n                \"<tr><td style='border: 3px solid darkgreen; padding: 5px;'><code>\" +\r\n                \"export const useTestState = create<testState>()((set) => ({<br>\" +\r\n                \"&nbsp;&nbsp;a: 0,<br>\" +\r\n                \"&nbsp;&nbsp;b: () => {<br>\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;set((state) => {a: 10})<br>\" +\r\n                \"&nbsp;&nbsp;},<br>\" +\r\n                \"}))<br>\" +\r\n                \"</td></tr>\" +\r\n\r\n                \"</table></code>\" +\r\n                \"<br> In this case <strong>'a'</strong> is a state that meets both criteria and can be counted, while <strong>'c'</strong> is only declared in the <code>type</code> but not fulfilling the other condition, therefore it should <strong>NOT</strong> be counted!\" +\r\n                \"<br> Contrary to <strong>'c'</strong>, <strong>'b'</strong> also is declared in the <code>type</code>, but it is a function and not a state, therefore it is not to be counted aswell.<br><br>\" +\r\n                \"<strong>Only count states that meet both criteria and ignore any functions/actions.</strong>\"\r\n            ),\r\n\r\n            () => writer.print_string_on_stage(\r\n                \"In <strong>Redux</strong>, state is stored in a central object called the <code>initialState</code> and updated using <code>reducers</code> and the <code>actions</code> defined in it.<br><br>\" +\r\n                \"To count a valid state in this experiment, it must:<br>\" +\r\n                \"1. Be listed in the <code>interface</code> definition, and <span style='display:inline-block; width:12px; height:12px; background:darkblue; margin-left:5px;'></span><br>\" +\r\n                \"2. Be present in the <code>initialState</code> <span style='display:inline-block; width:12px; height:12px; background:darkgreen; margin-left:5px;'></span><br>\" +\r\n                \"Some states may be declared but never initialized, or used without being typed. These should not be counted.<br><br>\" +\r\n                //\"The actions inside the <code>reducers</code> can be ignored for this experiment.<br><br>\"  +\r\n                \"The <code>code</code> inside the <span style='display:inline-block; width:12px; height:12px; background:darkred; margin-left:5px;'></span> box can be ignored for this experiment.<br><br>\" +\r\n\r\n                \"<table style='border: 1px solid black;'>\" +\r\n                \"<tr><td style='border: 3px solid darkblue; padding: 5px;'><code>\" +\r\n                \"interface testState {<br>\" +\r\n                \"&nbsp;&nbsp;a: number,<br>\" +\r\n                \"&nbsp;&nbsp;b: number,<br>\" +\r\n                \"}</td></tr>\" +\r\n\r\n                \"<tr><td style='border: 3px solid darkgreen; padding: 5px;'><code>\" +\r\n                \"const initialState: testState = {<br>\" +\r\n                \"&nbsp;&nbsp;a: 0<br>\" +\r\n                \"}</td></tr>\" +\r\n\r\n                \"<tr><td style='border: 3px solid darkred; padding: 5px;'><code>\" +\r\n                \"export const testSlice = createSlice({<br>\" +\r\n                \"&nbsp;&nbsp;name: 'testState',<br>\" +\r\n                \"&nbsp;&nbsp;initialState,<br>\" +\r\n                \"&nbsp;&nbsp;reducers: {<br>\" +\r\n                //\"&nbsp;&nbsp;&nbsp;&nbsp;...<br>\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;z: (state) => {<br>\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.a = 1;<br>\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;},<br>\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;...<br>\" +\r\n                \"&nbsp;&nbsp;},<br>\" +\r\n                \"});<br>\" +\r\n                \"export const { a, b, z } = testSlice.actions;<br>\" +\r\n                \"export default testSlice.reducer<br>\" +\r\n                \"<br>\" +\r\n                \"export const store = configureStore({\\n<br>\" +\r\n                \"&nbsp;&nbsp;reducer: {<br>\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;testSlice: testSlice.reducer<br>\" +\r\n                \"&nbsp;&nbsp;},<br>\" +\r\n                \"})<br>\" +\r\n                \"<br>\" +\r\n                \"export type RootState = ReturnType&lt;typeof store.getState&gt;<br>\" +\r\n                \"export type AppDispatch = typeof store.dispatch;<br>\" +\r\n                \"<br>\" +\r\n                \"export const useAppDispatch = useDispatch.withTypes&lt;AppDispatch&gt;();<br>\" +\r\n                \"export const useAppSelector = useSelector.withTypes&lt;RootState&gt;();<br>\" +\r\n                \"</td></tr>\" +\r\n\r\n\r\n                \"</table></code>\" +\r\n                \"<br> In this case <strong>'a'</strong> is a state that meets both criteria and can be counted, while <strong>'b'</strong> is only declared in the <code>interface</code> but not fulfilling the other condition, therefore it should <strong>NOT</strong> be counted!<br><br>\" +\r\n                \"<strong>Only count states that meet both criteria and ignore any functions/actions.</strong>\"\r\n            ),\r\n\r\n            () => writer.print_string_on_stage(\r\n                \"<strong>Jotai</strong> is a state management library for React that uses <em>atoms</em> as basic units of state.<br><br>\" +\r\n                \"Each atom is a standalone piece of state created using <code>atom()</code>.<br><br>\" +\r\n                \"Jotai does not use context, reducers, or slices — just simple atoms.<br><br>\" +\r\n                //\"In this experiment, the task is to only count atoms that hold an actual value (e.g., <code>const a = atom(0);</code>), which serve as a state.<br><br>\" +\r\n                \"In this experiment, the task is to only count atoms that hold an actual value, which serve as a state.<span style='display:inline-block; width:12px; height:12px; background:green; margin-left:5px;'></span><br>\" +\r\n                \"Write-only atoms can be ignored.<span style='display:inline-block; width:12px; height:12px; background:darkred; margin-left:5px;'></span><br><br>\" +\r\n                //\"Write-only atoms like this:<br><table style='border: 1px solid black;'><td style='padding: 5px;'><code>const b = atom(<br>\" +\r\n                //\"&nbsp;&nbsp;null,<br>\" +\r\n                //\"&nbsp;&nbsp;(get, set) => {<br>\" +\r\n                //\"&nbsp;&nbsp;&nbsp;&nbsp;set(a, 10 )<br>\" +\r\n                //\"&nbsp;&nbsp;}<br>\" +\r\n                //\");</td></table></code>\" +\r\n                \"<table style='border: 1px solid black;'>\" +\r\n                \"<tr><td style='border: 3px solid green; padding: 5px;'><code>\" +\r\n                \"const a = atom(0);<br>\" +\r\n                \"<code></td></tr>\" +\r\n\r\n                \"<tr><td style='border: 3px solid darkred; padding: 5px;'><code>\" +\r\n                \"const b = atom(<br>\" +\r\n                \"&nbsp;&nbsp;null,\" +\r\n                \"&nbsp;&nbsp;(get, set) => {<br>\" +\r\n                \"&nbsp;&nbsp;&nbsp;&nbsp;set(a, 10 )<br>\" +\r\n                \"&nbsp;&nbsp;}<br>\" +\r\n                \");<code></td></tr>\" +\r\n\r\n                \"</table>\" +\r\n\r\n                \"<br> In this case <strong>'a'</strong> is an <code>atom</code> that serves as a state and can be counted!\" +\r\n                \"<br> Contrary to <strong>'a'</strong>, <strong>'b'</strong> is a write-only <code>atom</code> and should therefore not be counted.<br><br>\" +\r\n                \"<strong>Only count states that meet the criteria and ignore any write-only atoms.</strong>\" +\r\n                \"<br><br>Ok, you are now ready to start with the training phase (that you enter by pressing <code>[Enter]</code>).\"\r\n            ),\r\n\r\n            /*\r\n            () => writer.print_string_on_stage(\r\n                \"<strong>Before you start, here’s a quick checklist:</strong><br><br>\" +\r\n                \"<ul>\" +\r\n                \"<li><strong>Only count actual states</strong>, not functions or actions.</li>\" +\r\n                \"<li>State must be <strong>correctly defined and exported</strong> in the example.</li>\" +\r\n                \"<li>Each tool has slightly different rules — refer back if unsure.</li>\" +\r\n                \"<li>Jotai examples are error-free. The others may contain mistakes you must detect.</li>\" +\r\n                \"</ul>\" +\r\n                \"Now you're ready to begin!<br><br>\"\r\n            ),\r\n            */\r\n        ],\r\n\r\n        pre_run_training_instructions: writer.string_page_command(\r\n            \"You entered the training phase. In the training phase, you get a random set of tasks, showing code for one of the previously explained tools.<br><br>\" +\r\n            \"Please, run the training until you feel familiar with the experiment. This could be - for example - the case when you correctly answered the tasks 10 times.<br><br>\" +\r\n            \"You can interrupt the training phase by pressing [ESC]. Otherwise, the training phase will be repeated.<br><br>\" +\r\n            \"<b>Note that you can see that you are in the training phase (top, right of the screen says <code>Training</code>)</b><br><br>\" +\r\n            \"Note that you give a response to a question by pressing a number between [0], and [9]. <br><br>\"+\r\n            \"It is also advised to adjust the overall display scale of the page to see the whole code via <strong>CTRL</strong> + <strong>Mouse Wheel</strong> .\"\r\n        ),\r\n\r\n        pre_run_experiment_instructions: writer.string_page_command(\r\n            writer.convert_string_to_html_string(\r\n                \"You are now entering the experiment phase.\"\r\n            )\r\n        ),\r\n        /*\r\n        post_questionnaire: [\r\n            alternatives(\"Experience\", \"How experienced are you with React and Jotai?\", [\r\n                \"No experience\",\r\n                \"Beginner\",\r\n                \"Intermediate\",\r\n                \"Advanced\",\r\n                \"Expert\"\r\n            ]),\r\n            alternatives(\"Debugging\", \"How comfortable are you with debugging state management issues?\", [\r\n                \"Not comfortable\",\r\n                \"Somewhat comfortable\",\r\n                \"Comfortable\",\r\n                \"Very comfortable\"\r\n            ]),\r\n        ],\r\n\r\n        */\r\n        finish_pages: [\r\n            writer.string_page_command(\r\n                \"<p>Experiment complete. Next, your data will be downloaded.</p>\"\r\n            )\r\n        ],\r\n\r\n        layout: [\r\n            //{ variable: \"has_error\", treatments: [\"true\", \"false\"] },\r\n            //{ variable: \"State_Management_Tool\", treatments: [\"Redux\", \"Jotai\", \"Context\", \"Zustand\"] },\r\n            { variable: \"State_Management_Tool\", treatments: [\"Redux\", \"Jotai\", \"Context\", \"Zustand\", \"Redux_Error\", \"Context_Error\", \"Zustand_Error\"] },\r\n            //{ variable: \"Amount_Group\", treatments: [\"0\", \"1\", \"2\"] },\r\n            { variable: \"Amount_Group\", treatments: [\"0\", \"1\"] },\r\n            //{ variable: \"amount_states\", treatments: [\"\"] },\r\n        ],\r\n\r\n        repetitions: 4,\r\n\r\n        measurement: Reaction_Time(keys([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"])),\r\n        //measurement: Time_to_finish(text_input_experiment),\r\n\r\n        task_configuration: (t: Task) => {\r\n\r\n            let smt = t.treatment_value(\"State_Management_Tool\");\r\n            let amt = t.treatment_value(\"Amount_Group\");\r\n            let task: Code_Generation_Task = new Code_Generation_Task(false, smt, amt);\r\n            //let task: Code_Generation_Task = random_array_element(tasks[\"\" + t.treatment_value(\"State_Management_Tool\")]);\r\n            let code = task.generate_code();\r\n            let explanation = get_tasks_explanation(smt);\r\n            console.log(\"*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n explanation: \", explanation);\r\n\r\n\r\n            t.has_pre_task_description = true;\r\n\r\n            t.do_print_pre_task = () => {\r\n                //writer.print_string_on_stage(task_generator[0]);\r\n                //let smt = task.stateManagementTool;\r\n                const cleaned = String(smt).replace(/_Error$/, \"\");\r\n                writer.print_string_on_stage(\"The next State Management Tool will be: \" + cleaned);\r\n                writer.print_string_on_stage(explanation);\r\n                writer.print_string_on_stage(\"Press [Return].\");\r\n            }\r\n\r\n\r\n            t.do_print_task = () => {\r\n\r\n                //let code = task.generate_code();\r\n                //let he = t.treatment_value(\"has_error\");\r\n                //let smt = t.treatment_value(\"State_Management_Tool\");\r\n                writer.clear_stage();\r\n\r\n                //writer.print_html_on_stage(task.generate_code());\r\n                //writer.print_string_on_stage(\"<div class='sourcecode'>\" + code + \"</div>\");\r\n                writer.print_string_on_stage(`\r\n                  <table style=\"width:100%; border-collapse: collapse;\">\r\n                    <tr>\r\n                      <td style=\"width: 50%; vertical-align: top; border-right: 1px solid #ccc; padding: 10px;\">\r\n                        <div class='sourcecode'>${code}</div>\r\n                      </td>\r\n                      <td style=\"width: 50%; vertical-align: top; padding: 10px;\">\r\n                        <div class='explanation'>${explanation}</div>\r\n                      </td>\r\n                    </tr>\r\n                  </table>\r\n                `);\r\n                t.expected_answer = task.answer;\r\n            };\r\n\r\n            t.do_print_after_task_information = () => {\r\n                let error_msg = task.response_text();\r\n                console.log(error_msg);\r\n\r\n                //writer.clear_stage();\r\n                if (t.given_answer == t.expected_answer) {\r\n                    writer.print_string_on_stage(\"<div class='correct'>\" +\"CORRECT! Given answer: \" + t.given_answer + \"\\n\" + error_msg + \"</div>\");\r\n                } else {\r\n                    writer.print_error_string_on_stage(writer.convert_string_to_html_string(\"WRONG! Given answer: \" + t.given_answer + \"\\n\" + error_msg));\r\n                }\r\n\r\n                //task.debug_help(t);\r\n            };\r\n        }\r\n    };\r\n};\r\n\r\nBROWSER_EXPERIMENT(experiment_configuration_function);\r\n"],"names":[],"sourceRoot":""}